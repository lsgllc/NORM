package com.txdot.isd.rts.services.webapps.util;import java.io.FileInputStream;import java.io.InputStream;import java.util.Enumeration;import java.util.Properties;import com.txdot.isd.rts.services.util.constants.CommonConstant;/* * * CommunicationProperty.java * * (c) Texas Department of Transportation 2002 * --------------------------------------------------------------------- * Change History: * Name			Date		Description * ------------	-----------	-------------------------------------------- * Jeff S.		02/08/2005	Added a method used to set the link prefix * 							to the current context of the csEnvironment. * 							This is only called when env. is txdot at  * 							this time and is called from main menu jsp. * 							add setLinkPrefix() *							defect 7712 ver 5.2.3 * Ray Rowehl	03/03/2006	Always use resource stream to find file  * 							to load properties from. * 							Did some minor 5.2.3 code cleanup. * 							modify init() * 							defect 8553 Ver 5.2.3 * Ray Rowehl	04/25/2006	Found that we attempt to load TXO first. * Bob Brown				If that fails, then attempt to load TXDOT. * 							Note that the prop files are in different * 							locations - one "client" and one "server". * 							Now we attempt to load teh properties files * 							using getSystemResourceAsStream first. * 							If that fails, then we use FileInputStream. * 							modify init()  * 							Make the env and region variables public for  * 							the TxO project. * 							defect 8553 Ver 5.2.3 * B Brown		05/15/2006	For conversion of the 5.2.3 RefundData  * 							object to the 5.2.2 TxO RefundData object,  *  						and the 5.2.3 PaymentData object to the  * 							5.2.2 TxO PaymentData object, a TxOVersion * 							property was added to check the version * 							TxO is running under, before sending refund * 							and payment data requests to Txo. * 							This code relies on an rtswebapps  * 							property file change, which conatains this * 							new TxOVersion property value. * 							add MSG_COMM_PROP_TxOVersion * 							add csTxOVersion * 							add getTxOVersion() * 							modify setValues() * 							modify printValues()  * 							defect 8777 Ver 5.2.3 * Jeff S.		08/01/2006	Renamed cbUseProxy to cbVendorPayRptUseProxy * B. Brown					Renamed lbRefundProxyProxyOn to  * 							cbRefundPaymentUseProxy  *							add MSG_COMM_PROP_VENDORPAYRPT_PROXY_FLAG, *								MSG_COMM_PROP_REFUND_PAYMENT_PROXY_FLAG					 * 							add getVendorPayRptUseProxy() * 								getRefundPaymentUseProxy() * 							delete getRefundInfoProxyOn() * 							delete MSG_MAIN_PRINT_PROPS * 							modify setValues() * 								   printValues()  * 							defect 8368 Ver 5.2.4 * B. Brown		09/05/2006	Bea Weblogic change  * 							modify init(), setValues() * 							defect 8925 IVTRS Ver 2.0.0 * B. Brown		10/03/2006  Add a read to a new version.cfg file * 							to get the IVRTS version and present in * 							the txdot_vtr_help.jsp	 *							add IVTRS_VERSION_FILE_NAME * 								csIVTRSVersion					 * 							add getIVTSVersion() * 								setIVTSVersion() * 							modify setValues() * 								   init()	 * 								   printValues()  * 							defect 8250 IVTRS Version 2.0.0 * B. Brown		10/31/2006	Bea Weblogic change *							Use getResourceAsStream to read all  *							properties files except  *							Configuration.properties * 							modify init() * 							defect 8925 IVTRS Ver 2.0.0 * Jeff S.		04/23/2007	Add new property that holds where to go * 							to connect to the web service. * 							add csWebServiceHost, csWebServiceName,  * 								csWebServicePort,  * 								MSG_COMM_PROP_WEB_SERVICE_HOST, * 								MSG_COMM_PROP_WEB_SERVICE_NAME, * 								MSG_COMM_PROP_WEB_SERVICE_PORT * 							add getWebServiceHost(),  * 								getWebServiceName(), getWebServicePort() * 							modify setValues(), printValues() * 							defect 9121 Ver Special Plates * Jeff S.		06/26/2007	Add new property that decides if we are to * 							auto create the POS transaction for Special * 							Plates. * 							add csAutoCreateSPPOSTrans, * 								MSG_COMM_PROP_AUTO_CREATE_SP_TRANS * 							add getAutoCreateSPPOSTrans() * 							modify setValues(), printValues() * 							defect 9121 Ver Special Plates * B. Brown		03/24/2008  Add a version date to the version.cfg file * 							to get the IVRTS version date and present in * 							the txdot_vtr_help.jsp	 *							add TXT_IVTRS_VERSION_DATE * 								ssIVTRSVersionDate					 * 							add getIVTRSVersionDate() * 								setIVTRSVersionDate() * 							modify setValues()	 * 								   printValues()  * 							defect 9601 IVTRS Version 2.2.3 * B. Brown		03/11/2009  Add the ability to set the UseMQ property				 * 							add setUseMQ() * 							defect 9944 Ver Defect_POS_E (6.0.0) * B. Brown		01/11/2012	Add new property for SP images. * 							add TXT_SP_IMAGES_DIR * 							add ssSPImagesDir, getter, setter * 							modify setValues(), printValues * 							defect 11232 Ver IVTRS 4.2.0 * --------------------------------------------------------------------- *//** * This Class is used to load properties that are unique for different * environments. * * @version	IVTRS 4.2.0		01/11/2012 * @author	Clifford Chen * <br>Creation Date:		01/02/2002 15:59:28 *//* &CommunicationProperty& */public class CommunicationProperty{/* &CommunicationProperty'CONNECT_TO_TXDOT& */	public static final int CONNECT_TO_TXDOT = 1;/* &CommunicationProperty'CONNECT_TO_TEXASONLINE& */	public static final int CONNECT_TO_TEXASONLINE = 2;/* &CommunicationProperty'MSG_CANNOT_DETERMINE_IF_TEST_OR_PROD& */	private static final String MSG_CANNOT_DETERMINE_IF_TEST_OR_PROD =		"RTS II PHASE 2, cannot determine it is in dev or test or train or prod!!!";	// defect 9121/* &CommunicationProperty'MSG_COMM_PROP_AUTO_CREATE_SP_TRANS& */	private static final String MSG_COMM_PROP_AUTO_CREATE_SP_TRANS = 		"RTS II PHASE 2, communication property, AutoCreateSpclPltPOSTrans=";	// end defect 9121/* &CommunicationProperty'MSG_COMM_PROP_BATCH_ERROR_FILE_NAME& */	private static final String MSG_COMM_PROP_BATCH_ERROR_FILE_NAME =		"RTS II PHASE 2, communication property, BatchErrorFileName=";/* &CommunicationProperty'MSG_COMM_PROP_BATCH_LOG_FILE_NAME& */	private static final String MSG_COMM_PROP_BATCH_LOG_FILE_NAME =		"RTS II PHASE 2, communication property, BatchLogFileName=";/* &CommunicationProperty'MSG_COMM_PROP_ENV& */	private static final String MSG_COMM_PROP_ENV =		"RTS II PHASE 2, communication property, Environment=";/* &CommunicationProperty'MSG_COMM_PROP_EPAYURL& */	private static final String MSG_COMM_PROP_EPAYURL =		"RTS II PHASE 2, communication property, EpayURL=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_DATE_END_TAG& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_DATE_END_TAG =		"RTS II PHASE 2, communication property, EpayVendorDateEndTag=";/* &CommunicationProperty'MAG_COMM_PROP_EPAY_VENDOR_DATE_START_TAG& */	private static final String MAG_COMM_PROP_EPAY_VENDOR_DATE_START_TAG =		"RTS II PHASE 2, communication property, EpayVendorDateStartTag=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_DISPLAY_NUM_TAG& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_DISPLAY_NUM_TAG =		"RTS II PHASE 2, communication property, EpayVendorDisplayNumTag=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_HOST& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_HOST =		"RTS II PHASE 2, communication property, EpayVendorHost=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_ID_TAG& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_ID_TAG =		"RTS II PHASE 2, communication property, EpayVendorVendorIdTag=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_LOGIN_PAGE& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_LOGIN_PAGE =		"RTS II PHASE 2, communication property, EpayVendorLoginPage=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_PARSE_METHOD_VERSION& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_PARSE_METHOD_VERSION =		"RTS II PHASE 2, communication property, EpayVendorParseMethodVersion=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_PASSWORD& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_PASSWORD =		"RTS II PHASE 2, communication property, EpayVendorPassword=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_PASSWORD_TAG& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_PASSWORD_TAG =		"RTS II PHASE 2, communication property, EpayVendorPasswordTag=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_PAYMENT_TYPE_TAG& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_PAYMENT_TYPE_TAG =		"RTS II PHASE 2, communication property, EpayVendorPaymentTypeTag=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_TRACE_NUM_TAG& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_TRACE_NUM_TAG =		"RTS II PHASE 2, communication property, EpayVendorTraceNumTag=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_USER& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_USER =		"RTS II PHASE 2, communication property, EpayVendorUser=";/* &CommunicationProperty'MSG_COMM_PROP_EPAY_VENDOR_USER_TAG& */	private static final String MSG_COMM_PROP_EPAY_VENDOR_USER_TAG =		"RTS II PHASE 2, communication property, EpayVendorUserTag=";/* &CommunicationProperty'MSG_COMM_PROP_ERROR_FILE_NAME& */	private static final String MSG_COMM_PROP_ERROR_FILE_NAME =		"RTS II PHASE 2, communication property, ErrorFileName=";/* &CommunicationProperty'MSG_COMM_PROP_LINK_PREFIX& */	private static final String MSG_COMM_PROP_LINK_PREFIX =		"RTS II PHASE 2, communication property, LinkPrefix=";/* &CommunicationProperty'MSG_COMM_PROP_LOG_FILE_NAME& */	private static final String MSG_COMM_PROP_LOG_FILE_NAME =		"RTS II PHASE 2, communication property, LogFileName=";/* &CommunicationProperty'MSG_COMM_PROP_LOG_LEVEL& */	private static final String MSG_COMM_PROP_LOG_LEVEL =		"RTS II PHASE 2, communication property, LogLevel=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_ERROR_FILE_NAME& */	private static final String MSG_COMM_PROP_MQ_ERROR_FILE_NAME =		"RTS II PHASE 2, communication property, MQErrorFileName=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_LOG_FILE_NAME& */	private static final String MSG_COMM_PROP_MQ_LOG_FILE_NAME =		"RTS II PHASE 2, communication property,	MQLogFileName=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TEXASONLINE_CHANNEL& */	private static final String MSG_COMM_PROP_MQ_TEXASONLINE_CHANNEL =		"RTS II PHASE 2, communication property, MQTexasOnlineChannel=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TEXASONLINE_HOST_1& */	private static final String MSG_COMM_PROP_MQ_TEXASONLINE_HOST_1 =		"RTS II PHASE 2, communication property, MQTexasOnlineHost1=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TEXASONLINE_PORT& */	private static final String MSG_COMM_PROP_MQ_TEXASONLINE_PORT =		"RTS II PHASE 2, communication property, MQTexasOnlinePort=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TEXASONLINE_POST_QUEUE& */	private static final String MSG_COMM_PROP_MQ_TEXASONLINE_POST_QUEUE =		"RTS II PHASE 2, communication property, MQTexasOnlinePostQueue=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TEXASONLINE_QUEUE_MANAGER& */	private static final String MSG_COMM_PROP_MQ_TEXASONLINE_QUEUE_MANAGER =		"RTS II PHASE 2, communication property, MQTexasOnlineQueueManager=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TEXASONLINE_QUEUE_MANAGER_1& */	private static final String MSG_COMM_PROP_MQ_TEXASONLINE_QUEUE_MANAGER_1 =		"RTS II PHASE 2, communication property, MQTexasOnlineQueueManager1=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TEXASONLINE_RET_QUEUE& */	private static final String MSG_COMM_PROP_MQ_TEXASONLINE_RET_QUEUE =		"RTS II PHASE 2, communication property, MQTexasOnlineRetrieveQueue=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TEXASONLINE_HOST& */	private static final String MSG_COMM_PROP_MQ_TEXASONLINE_HOST =		"RTS II PHASE 2, communication property, MQTexasOnlineHost=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TXDOT_HOST& */	private static final String MSG_COMM_PROP_MQ_TXDOT_HOST =		"RTS II PHASE 2, communication property, MQTxdotHost=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TXDOT_HOST_1& */	private static final String MSG_COMM_PROP_MQ_TXDOT_HOST_1 =		"RTS II PHASE 2, communication property, MQTxdotHost1=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TXDOT_PORT& */	private static final String MSG_COMM_PROP_MQ_TXDOT_PORT =		"RTS II PHASE 2, communication property, MQTxdotPort=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TXDOT_POST_QUEUE& */	private static final String MSG_COMM_PROP_MQ_TXDOT_POST_QUEUE =		"RTS II PHASE 2, communication property, MQTxdotPostQueue=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TXDOT_QUEUE_MANAGER& */	private static final String MSG_COMM_PROP_MQ_TXDOT_QUEUE_MANAGER =		"RTS II PHASE 2, communication property, MQTxdotQueueManager=";/* &CommunicationProperty'MSG_COMM_PROP_MQ_TXDOT_QUEUE_MANAGER_1& */	private static final String MSG_COMM_PROP_MQ_TXDOT_QUEUE_MANAGER_1 =		"RTS II PHASE 2, communication property, MQTxdotQueueManager1=";/* &CommunicationProperty'MSG_COMM_PROP_OLDURL& */	private static final String MSG_COMM_PROP_OLDURL =		"RTS II PHASE 2, communication property, OldURL=";/* &CommunicationProperty'MSG_COMM_PROP_PROXY_HOST& */	private static final String MSG_COMM_PROP_PROXY_HOST =		"RTS II PHASE 2, communication property, ProxyHost=";/* &CommunicationProperty'MSG_COMM_PROP_PROXY_PASSWORD& */	private static final String MSG_COMM_PROP_PROXY_PASSWORD =		"RTS II PHASE 2, communication property, ProxyPassword=";/* &CommunicationProperty'MSG_COMM_PROP_PROXY_PORT& */	private static final String MSG_COMM_PROP_PROXY_PORT =		"RTS II PHASE 2, communication property, ProxyPort=";/* &CommunicationProperty'MSG_COMM_PROP_PROXY_REALM& */	private static final String MSG_COMM_PROP_PROXY_REALM =		"RTS II PHASE 2, communication property, ProxyRealm=";/* &CommunicationProperty'MSG_COMM_PROP_PROXY_USER& */	private static final String MSG_COMM_PROP_PROXY_USER =		"RTS II PHASE 2, communication property, ProxyUser=";	// defect 8368		//	private static final String MSG_COMM_PROP_REFUND_INFO_PROXY_ON =	//		"RTS II PHASE 2, communication property, RefundInfoProxyOn=";		//	private static final String MSG_MAIN_PRINT_PROPS =	//		"RTS II PHASE 2, print the properties";	/* &CommunicationProperty'MSG_COMM_PROP_REFUND_PAYMENT_PROXY_FLAG& */	private static final String MSG_COMM_PROP_REFUND_PAYMENT_PROXY_FLAG =		"RTS II PHASE 2, communication property, RefundPaymentUseProxy=";/* &CommunicationProperty'MSG_COMM_PROP_VENDORPAYRPT_PROXY_FLAG& */	private static final String MSG_COMM_PROP_VENDORPAYRPT_PROXY_FLAG =		"RTS II PHASE 2, communication property, VendorPayRptUseProxy=";	// end defect 8368/* &CommunicationProperty'MSG_COMM_PROP_REG& */	private static final String MSG_COMM_PROP_REG =		"RTS II PHASE 2, communication property,Region=";/* &CommunicationProperty'MSG_COMM_PROP_SERVLET_HOST_1& */	private static final String MSG_COMM_PROP_SERVLET_HOST_1 =		"RTS II PHASE 2, communication property, ServletHost1=";/* &CommunicationProperty'MSG_COMM_PROP_SERVLET_HOST_2& */	private static final String MSG_COMM_PROP_SERVLET_HOST_2 =		"RTS II PHASE 2, communication property, ServletHost2=";/* &CommunicationProperty'MSG_COMM_PROP_SERVLET_NAME_1& */	private static final String MSG_COMM_PROP_SERVLET_NAME_1 =		"RTS II PHASE 2, communication property, ServletName1=";/* &CommunicationProperty'MSG_COMM_PROP_SERVLET_NAME_2& */	private static final String MSG_COMM_PROP_SERVLET_NAME_2 =		"RTS II PHASE 2, communication property, ServletName2=";/* &CommunicationProperty'MSG_COMM_PROP_SERVLET_PORT_1& */	private static final String MSG_COMM_PROP_SERVLET_PORT_1 =		"RTS II PHASE 2, communication property, ServletPort1=";/* &CommunicationProperty'MSG_COMM_PROP_TxOVersion& */	private static final String MSG_COMM_PROP_TxOVersion =		"RTS II PHASE 2, communication property, TxOVersion=";	// defect 8777/* &CommunicationProperty'MSG_COMM_PROP_SERVLET_PORT_2& */	private static final String MSG_COMM_PROP_SERVLET_PORT_2 =		"RTS II PHASE 2, communication property, ServletPort2=";	// end defect 8777	/* &CommunicationProperty'MSG_COMM_PROP_TXDOT_CHANNNEL& */	private static final String MSG_COMM_PROP_TXDOT_CHANNNEL =		"RTS II PHASE 2, communication property, MQTxdotChannel=";/* &CommunicationProperty'MSG_COMM_PROP_TXDOT_SERVER& */	private static final String MSG_COMM_PROP_TXDOT_SERVER =		"RTS II PHASE 2, communication property, TxdotServer=";/* &CommunicationProperty'MSG_COMM_PROP_TXDOT_SERVER_1& */	private static final String MSG_COMM_PROP_TXDOT_SERVER_1 =		"RTS II PHASE 2, communication property, TxdotServer1=";/* &CommunicationProperty'MSG_COMM_PROP_TEXASONLINE_END& */	private static final String MSG_COMM_PROP_TEXASONLINE_END =		"=========== RTS II PHASE 2, TexasOnline ===========>>";/* &CommunicationProperty'MSG_COMM_PORT_TEXASONLINE_START& */	private static final String MSG_COMM_PORT_TEXASONLINE_START =		"<<========= RTS II PHASE 2, TexasOnline =============";/* &CommunicationProperty'MSG_COMM_PROP_TXDOT_END& */	private static final String MSG_COMM_PROP_TXDOT_END =		"========= RTS II PHASE 2, TxDOT =============>>";/* &CommunicationProperty'MSG_COMM_PROP_TXDOT_START& */	private static final String MSG_COMM_PROP_TXDOT_START =		"<<========= RTS II PHASE 2, TxDOT =============";/* &CommunicationProperty'MSG_COMM_PROP_URL& */	private static final String MSG_COMM_PROP_URL =		"RTS II PHASE 2, communication property, URL=";/* &CommunicationProperty'MSG_COMM_PROP_USE_MQ& */	private static final String MSG_COMM_PROP_USE_MQ =		"RTS II PHASE 2, communication property, UseMQ=";/* &CommunicationProperty'MSG_COMM_PROP_VENDOR_REPORT_PAGE& */	private static final String MSG_COMM_PROP_VENDOR_REPORT_PAGE =		"RTS II PHASE 2, communication property, EpayVendorReportPage=";	// defect 9121/* &CommunicationProperty'MSG_COMM_PROP_WEB_SERVICE_HOST& */	private static final String MSG_COMM_PROP_WEB_SERVICE_HOST =		"RTS II PHASE 2, communication property, WebServiceHost=";/* &CommunicationProperty'MSG_COMM_PROP_WEB_SERVICE_NAME& */	private static final String MSG_COMM_PROP_WEB_SERVICE_NAME =		"RTS II PHASE 2, communication property, WebServiceName=";/* &CommunicationProperty'MSG_COMM_PROP_WEB_SERVICE_PORT& */	private static final String MSG_COMM_PROP_WEB_SERVICE_PORT =		"RTS II PHASE 2, communication property, WebServicePort=";	// end defect 9121/* &CommunicationProperty'MSG_COULD_NOT_FIND_PROPERTY_FILE& */	private static final String MSG_COULD_NOT_FIND_PROPERTY_FILE =		", RTS II PHASE 2, could not find environment property file!!!";/* &CommunicationProperty'MSG_MAIN_LOAD_PROPS& */	private static final String MSG_MAIN_LOAD_PROPS =		"RTS II PHASE 2, load the properties";/* &CommunicationProperty'MSG_RUNNING_AS_TXDOT_SERVER& */	private static final String MSG_RUNNING_AS_TXDOT_SERVER =		"RTS II PHASE 2, Environment determined to be TxDOT";/* &CommunicationProperty'MSG_RUNNING_AS_TEXASONLINE& */	private static final String MSG_RUNNING_AS_TEXASONLINE =		"RTS II PHASE 2, Environment determined to be TexasOnline";/* &CommunicationProperty'MSG_TRYING_TO_RESOLVE& */	private static final String MSG_TRYING_TO_RESOLVE =		"RTS II PHASE 2, Trying to resolve environment";/* &CommunicationProperty'TXT_COMM_PROP& */	private static final String TXT_COMM_PROP =		"RTS II PHASE 2, communication property, ";/* &CommunicationProperty'TXT_NOTPARTICIPATELINK& */	private static final String TXT_NOTPARTICIPATELINK =		"NotParticipateLink_";	// defect 8250	/* &CommunicationProperty'TXT_IVTRS_VERSION& */	private static final String TXT_IVTRS_VERSION = "IVTRS Version = ";	// end defect 8250		// defect 9601	/* &CommunicationProperty'TXT_IVTRS_VERSION_DATE& */	private static final String TXT_IVTRS_VERSION_DATE = "IVTRS Version Date = ";	// end defect 9601		// defect 11232/* &CommunicationProperty'TXT_SP_IMAGES_DIR& */	public static String TXT_SP_IMAGES_DIR = "Special Plates Images Directory = ";	// end defect 11232/* &CommunicationProperty'TXT_DOT_PROPERTIES& */	private static final String TXT_DOT_PROPERTIES = ".properties";/* &CommunicationProperty'TXT_RTSWEBAPPS& */	private static final String TXT_RTSWEBAPPS = "rtswebapps_";/* &CommunicationProperty'TXT_FALSE& */	private static final String TXT_FALSE = "false";/* &CommunicationProperty'TXT_TRUE& */	private static final String TXT_TRUE = "true";/* &CommunicationProperty'TXT_INTEST& */	private static final String TXT_INTEST = "INTEST";/* &CommunicationProperty'TXT_INDEV& */	private static final String TXT_INDEV = "INDEV";/* &CommunicationProperty'TXO_ENV_FILE_NAME& */	private static final String TXO_ENV_FILE_NAME =		"Configuration.properties";/* &CommunicationProperty'TXDOT_ENV_FILE_NAME& */	private static final String TXDOT_ENV_FILE_NAME =		"txdotrts/rtswebapps_env.properties";	// defect 8250/* &CommunicationProperty'IVTRS_VERSION_FILE_NAME& */	private static final String IVTRS_VERSION_FILE_NAME =		"txdotrts/version.cfg";	// end defect 8250		// Environment and Region constants	// defect 8553/* &CommunicationProperty'DESKTOP& */	public static final String DESKTOP = "desktop";/* &CommunicationProperty'TRAIN& */	public static final String TRAIN = "train";/* &CommunicationProperty'TXT_DEV& */	public static final String TXT_DEV = "dev";/* &CommunicationProperty'TXT_PROD& */	public static final String TXT_PROD = "prod";/* &CommunicationProperty'TXT_TEST& */	public static final String TXT_TEST = "test";/* &CommunicationProperty'TXT_TEXASONLINE& */	public static final String TXT_TEXASONLINE = "texasonline";/* &CommunicationProperty'TXT_TXDOT_SERVER& */	public static final String TXT_TXDOT_SERVER = "txdot";/* &CommunicationProperty'TXT_REGION& */	public static final String TXT_REGION = "Region";	// end defect 8553/* &CommunicationProperty'csPropertyFileName& */	private static String csPropertyFileName = "txdotrts/";	// A. Common	// Environment/* &CommunicationProperty'csEnvironment& */	private static String csEnvironment;/* &CommunicationProperty'csRegion& */	private static String csRegion;	// B. TexasOnline	// (1) Servlet/* &CommunicationProperty'csServletHost1& */	private static String csServletHost1;/* &CommunicationProperty'csServletName1& */	private static String csServletName1;/* &CommunicationProperty'csServletPort1& */	private static String csServletPort1;	// Web Service/* &CommunicationProperty'csWebServiceHost& */	private static String csWebServiceHost;/* &CommunicationProperty'csWebServiceName& */	private static String csWebServiceName;/* &CommunicationProperty'csWebServicePort& */	private static String csWebServicePort;	// TxDOT Application servers/* &CommunicationProperty'csTxdotServer& */	private static String csTxdotServer;/* &CommunicationProperty'csTxdotServer1& */	private static String csTxdotServer1;	// (2) MQSeries/* &CommunicationProperty'csMQTexasOnlineHost& */	private static String csMQTexasOnlineHost;	// this is extra for test and production/* &CommunicationProperty'csMQTexasOnlineHost1& */	private static String csMQTexasOnlineHost1;/* &CommunicationProperty'csMQTexasOnlineChannel& */	private static String csMQTexasOnlineChannel;/* &CommunicationProperty'csMQTexasOnlineQueueManager& */	private static String csMQTexasOnlineQueueManager;	// this is extra for test and production	/* &CommunicationProperty'csMQTexasOnlineQueueManager1& */	private static String csMQTexasOnlineQueueManager1;	// for posting Renewal and Refund reply, payment replay/* &CommunicationProperty'csMQTexasOnlinePostQueue& */	private static String csMQTexasOnlinePostQueue;	// for retrieving objects coming from Txdot site	// e.g. RefundData, PaymentData./* &CommunicationProperty'csMQTexasOnlineRetrieveQueue& */	private static String csMQTexasOnlineRetrieveQueue;/* &CommunicationProperty'ciMQTexasOnlinePort& */	private static int ciMQTexasOnlinePort;	// (3) Misc	// For redirecting to https/* &CommunicationProperty'csUrl& */	private static String csUrl;/* &CommunicationProperty'csOldUrl& */	private static String csOldUrl;	// Epay/* &CommunicationProperty'csEpayUrl& */	private static String csEpayUrl;	// C. Txdot	// (1) Servlet/* &CommunicationProperty'csServletHost2& */	private static String csServletHost2;/* &CommunicationProperty'csServletName2& */	private static String csServletName2;/* &CommunicationProperty'csServletPort2& */	private static String csServletPort2;	// (2) MQSeries/* &CommunicationProperty'csMQTxdotHost& */	private static String csMQTxdotHost;	// This is extra for production/* &CommunicationProperty'csMQTxdotHost1& */	private static String csMQTxdotHost1;/* &CommunicationProperty'csMQTxdotChannel& */	private static String csMQTxdotChannel;/* &CommunicationProperty'csMQTxdotQueueManager& */	private static String csMQTxdotQueueManager;	// This is extra for production/* &CommunicationProperty'csMQTxdotQueueManager1& */	private static String csMQTxdotQueueManager1;	// for posting RefundData, PaymentData/* &CommunicationProperty'csMQTxdotPostQueue& */	private static String csMQTxdotPostQueue;	// Note: Retrieving objects from Txdot site MQSerices 	// and updating db is handled in Phase 1 by Richard.	// so no mqTxdotRetrieveQueue defined in Phase 2.	/* &CommunicationProperty'ciMQTxdotPort& */	private static int ciMQTxdotPort;	// (3) Epay Vendor Report/* &CommunicationProperty'csEpayVendorHost& */	private static String csEpayVendorHost;/* &CommunicationProperty'csEpayVendorLoginPage& */	private static String csEpayVendorLoginPage;/* &CommunicationProperty'csEpayVendorReportPage& */	private static String csEpayVendorReportPage;/* &CommunicationProperty'csEpayVendorUser& */	private static String csEpayVendorUser;/* &CommunicationProperty'csEpayVendorPassword& */	private static String csEpayVendorPassword;	// Tag names/* &CommunicationProperty'csEpayVendorUserTag& */	private static String csEpayVendorUserTag;/* &CommunicationProperty'csEpayVendorPasswordTag& */	private static String csEpayVendorPasswordTag;/* &CommunicationProperty'csEpayVendorDateStartTag& */	private static String csEpayVendorDateStartTag;/* &CommunicationProperty'csEpayVendorDateEndTag& */	private static String csEpayVendorDateEndTag;/* &CommunicationProperty'csEpayVendorVendorIdTag& */	private static String csEpayVendorVendorIdTag;/* &CommunicationProperty'csEpayVendorTraceNumTag& */	private static String csEpayVendorTraceNumTag;/* &CommunicationProperty'csEpayVendorPaymentTypeTag& */	private static String csEpayVendorPaymentTypeTag;/* &CommunicationProperty'csEpayVendorDisplayNumTag& */	private static String csEpayVendorDisplayNumTag;/* &CommunicationProperty'csEpayVendorParseMethodVersion& */	private static String csEpayVendorParseMethodVersion;	// (4) Proxy Server	// defect ****	// default to true so that if all else fails we will	// use nss-webproxy/* &CommunicationProperty'csProxyHost& */	private static String csProxyHost;/* &CommunicationProperty'ciProxyPort& */	private static int ciProxyPort;/* &CommunicationProperty'csProxyRealm& */	private static String csProxyRealm;/* &CommunicationProperty'csProxyUser& */	private static String csProxyUser;/* &CommunicationProperty'csProxyPassword& */	private static String csProxyPassword;	// (5) logs/* &CommunicationProperty'csLogLevel& */	private static String csLogLevel;/* &CommunicationProperty'csLogFileName& */	private static String csLogFileName;/* &CommunicationProperty'csErrorFileName& */	private static String csErrorFileName;/* &CommunicationProperty'csMQLogFileName& */	private static String csMQLogFileName;/* &CommunicationProperty'csMQErrorFileName& */	private static String csMQErrorFileName;/* &CommunicationProperty'csBatchLogFileName& */	private static String csBatchLogFileName;/* &CommunicationProperty'csBatchErrorFileName& */	private static String csBatchErrorFileName;		// (6) Special Plates/* &CommunicationProperty'cbAutoCreateSPPOSTrans& */	private static boolean cbAutoCreateSPPOSTrans = false;	// D. Misc	/* &CommunicationProperty'lbUseMQ& */	private static boolean lbUseMQ;	// defect 8368	// private static boolean lbRefundProxyProxyOn = true;	// private static boolean cbUseProxy = true;/* &CommunicationProperty'cbVendorPayRptUseProxy& */	private static boolean cbVendorPayRptUseProxy = true;/* &CommunicationProperty'cbRefundPaymentUseProxy& */	private static boolean cbRefundPaymentUseProxy = true;	// end defect 8368	// determined by csEnvironment/* &CommunicationProperty'lsLinkPrefix& */	private static String lsLinkPrefix;	// defect 8777/* &CommunicationProperty'csTxOVersion& */	private static String csTxOVersion;	// end defect 8777	// defect 8250/* &CommunicationProperty'csIVTRSVersion& */	private static String csIVTRSVersion;	// end defect 8250			// defect 9601/* &CommunicationProperty'ssIVTRSVersionDate& */	private static String ssIVTRSVersionDate;	// end defect 9601/* &CommunicationProperty'caConnectionProperties& */	private static Properties caConnectionProperties = new Properties();		// defect 11232/* &CommunicationProperty'ssSPImagesDir& */	public static String ssSPImagesDir;	// end defect 11232	// initialize on first reference	static {		init();	}	/**	 * CommunicationProperty constructor comment.	 *//* &CommunicationProperty.CommunicationProperty& */	public CommunicationProperty()	{		super();	}	/**	 * Returns cbAutoCreateSPPOSTrans	 * 	 * @return boolean	 *//* &CommunicationProperty.getAutoCreateSPPOSTrans& */	public static boolean getAutoCreateSPPOSTrans()	{		return cbAutoCreateSPPOSTrans;	}	/**	 * Returns csBatchErrorFileName	 * 	 * @return String	 *//* &CommunicationProperty.getBatchErrorFileName& */	public static String getBatchErrorFileName()	{		return csBatchErrorFileName;	}	/**	 * Returns csBatchLogFileName	 * 	 * @return String	 *//* &CommunicationProperty.getBatchLogFileName& */	public static String getBatchLogFileName()	{		return csBatchLogFileName;	}	/**	 * Return the Environment value.	 * 	 * @return String	 *//* &CommunicationProperty.getEnvironment& */	public static String getEnvironment()	{		return csEnvironment;	}	/**	 * Return the EpayURL value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayURL& */	public static String getEpayURL()	{		return csEpayUrl;	}	/**	 * Return the EpayVendorDateEndTag value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorDateEndTag& */	public static String getEpayVendorDateEndTag()	{		return csEpayVendorDateEndTag;	}	/**	 * Return the EpayVendorDateStartTag value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorDateStartTag& */	public static String getEpayVendorDateStartTag()	{		return csEpayVendorDateStartTag;	}	/**	 * Return the EpayVendorDisplayNumTag value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorDisplayNumTag& */	public static String getEpayVendorDisplayNumTag()	{		return csEpayVendorDisplayNumTag;	}	/**	 * Return the EpayVendorHost value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorHost& */	public static String getEpayVendorHost()	{		return csEpayVendorHost;	}	/**	 * Return the EpayVendorLoginPage value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorLoginPage& */	public static String getEpayVendorLoginPage()	{		return csEpayVendorLoginPage;	}	/**	 * Return the EpayVendorParseMethodVersion value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorParseMethodVersion& */	public static String getEpayVendorParseMethodVersion()	{		return csEpayVendorParseMethodVersion;	}	/**	 * Return the EpayVendorPassword value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorPassword& */	public static String getEpayVendorPassword()	{		return csEpayVendorPassword;	}	/**	 * Return the EpayVendorPasswordTag value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorPasswordTag& */	public static String getEpayVendorPasswordTag()	{		return csEpayVendorPasswordTag;	}	/**	 * Return the EpayVendorPaymentTypeTag value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorPaymentTypeTag& */	public static String getEpayVendorPaymentTypeTag()	{		return csEpayVendorPaymentTypeTag;	}	/**	 * Return the EpayVendorReportPage value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorReportPage& */	public static String getEpayVendorReportPage()	{		return csEpayVendorReportPage;	}	/**	 * Return the EpayVendorTraceNumTag value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorTraceNumTag& */	public static String getEpayVendorTraceNumTag()	{		return csEpayVendorTraceNumTag;	}	/**	 * Return the EpayVendorUser value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorUser& */	public static String getEpayVendorUser()	{		return csEpayVendorUser;	}	/**	 * Return the EpayVendorUserTag value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorUserTag& */	public static String getEpayVendorUserTag()	{		return csEpayVendorUserTag;	}	/**	 * Return the EpayVendorVendorIdTag value.	 * 	 * @return String	 *//* &CommunicationProperty.getEpayVendorVendorIdTag& */	public static String getEpayVendorVendorIdTag()	{		return csEpayVendorVendorIdTag;	}	/**	 * Return the ErrorFileName value.	 * 	 * @return String	 *//* &CommunicationProperty.getErrorFileName& */	public static String getErrorFileName()	{		return csErrorFileName;	}	/**	 * Return the LinkPrefix value.	 * 	 * @return String	 *//* &CommunicationProperty.getLinkPrefix& */	public static String getLinkPrefix()	{		return lsLinkPrefix;	}	/**	 * Return the LogFileName value.	 * 	 * @return String	 *//* &CommunicationProperty.getLogFileName& */	public static String getLogFileName()	{		return csLogFileName;	}	/**	 * Return the LogLevel value.	 * 	 * @return String	 *//* &CommunicationProperty.getLogLevel& */	public static String getLogLevel()	{		return csLogLevel;	}	/**	 * Return the MQErrorFileName value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQErrorFileName& */	public static String getMQErrorFileName()	{		return csMQErrorFileName;	}	/**	 * Return the MQLogFileName value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQLogFileName& */	public static String getMQLogFileName()	{		return csMQLogFileName;	}	/**	 * Return the MQTexasOnlineChannel value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTexasOnlineChannel& */	public static String getMQTexasOnlineChannel()	{		return csMQTexasOnlineChannel;	}	/**	 * Return the MQTexasOnlineHost value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTexasOnlineHost& */	public static String getMQTexasOnlineHost()	{		return csMQTexasOnlineHost;	}	/**	 * Return the MQTexasOnlineHost1 value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTexasOnlineHost1& */	public static String getMQTexasOnlineHost1()	{		return csMQTexasOnlineHost1;	}	/**	 * Return the MQTexasOnlinePort value.	 * 	 * @return int	 *//* &CommunicationProperty.getMQTexasOnlinePort& */	public static int getMQTexasOnlinePort()	{		return ciMQTexasOnlinePort;	}	/**	 * Return the MQTexasOnlinePostQueue value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTexasOnlinePostQueue& */	public static String getMQTexasOnlinePostQueue()	{		return csMQTexasOnlinePostQueue;	}	/**	 * Return the MQTexasOnlineQueueManager value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTexasOnlineQueueManager& */	public static String getMQTexasOnlineQueueManager()	{		return csMQTexasOnlineQueueManager;	}	/**	 * Return the MQTexasOnlineQueueManager1 value.	 *	 * @return String	 *//* &CommunicationProperty.getMQTexasOnlineQueueManager1& */	public static String getMQTexasOnlineQueueManager1()	{		return csMQTexasOnlineQueueManager1;	}	/**	 * Return the MQTexasOnlineRetrieveQueue value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTexasOnlineRetrieveQueue& */	public static String getMQTexasOnlineRetrieveQueue()	{		return csMQTexasOnlineRetrieveQueue;	}	/**	 * Return the MQTxdotChannel value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTxdotChannel& */	public static String getMQTxdotChannel()	{		return csMQTxdotChannel;	}	/**	 * Return the MQTxdotHost value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTxdotHost& */	public static String getMQTxdotHost()	{		return csMQTxdotHost;	}	/**	 * Return the MQTxdotHost1 value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTxdotHost1& */	public static String getMQTxdotHost1()	{		return csMQTxdotHost1;	}	/**	 * Return the MQTxdotPort value.	 * 	 * @return int	 *//* &CommunicationProperty.getMQTxdotPort& */	public static int getMQTxdotPort()	{		return ciMQTxdotPort;	}	/**	 * Return the MQTxdotPostQueue value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTxdotPostQueue& */	public static String getMQTxdotPostQueue()	{		return csMQTxdotPostQueue;	}	/**	 * Return the MQTxdotQueueManager value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTxdotQueueManager& */	public static String getMQTxdotQueueManager()	{		return csMQTxdotQueueManager;	}	/**	 * Return the MQTxdotQueueManager1 value.	 * 	 * @return String	 *//* &CommunicationProperty.getMQTxdotQueueManager1& */	public static String getMQTxdotQueueManager1()	{		return csMQTxdotQueueManager1;	}	/**	 * Return the NotParticipateCountyLink value.	 * 	 * @return String	 *//* &CommunicationProperty.getNotParticipateCountyLink& */	public static String getNotParticipateCountyLink(String countyNo)	{		return caConnectionProperties.getProperty(			TXT_NOTPARTICIPATELINK + countyNo);	}	/**	 * Return the OldURL value.	 * 	 * @return String	 *//* &CommunicationProperty.getOldURL& */	public static String getOldURL()	{		return csOldUrl;	}	/**	 * Return the ProxyHost value.	 * 	 * @return String	 *//* &CommunicationProperty.getProxyHost& */	public static String getProxyHost()	{		return csProxyHost;	}	/**	 * Return the ProxyPassword value.	 * 	 * @return String	 *//* &CommunicationProperty.getProxyPassword& */	public static String getProxyPassword()	{		return csProxyPassword;	}	/**	 * Return the ProxyPort value.	 * 	 * @return int	 *//* &CommunicationProperty.getProxyPort& */	public static int getProxyPort()	{		return ciProxyPort;	}	/**	 * Return the ProxyRealm value.	 * 	 * @return String	 *//* &CommunicationProperty.getProxyRealm& */	public static String getProxyRealm()	{		return csProxyRealm;	}	/**	 * Return the ProxyUser value.	 * 	 * @return String	 *//* &CommunicationProperty.getProxyUser& */	public static String getProxyUser()	{		return csProxyUser;	}	/**	 * Return the RefundInfoProxyOn value.	 * 	 * @return boolean	 *//* &CommunicationProperty.getRefundPaymentUseProxy& */	public static boolean getRefundPaymentUseProxy()	{		// defect 8368		// lbRefundInfoProxyOn;		return cbRefundPaymentUseProxy;		// end defect 8368	}	/**	 * Return the Region value.	 * 	 * @return String	 *//* &CommunicationProperty.getRegion& */	public static String getRegion()	{		return csRegion;	}	/**	 * Return the ServletHost1 value.	 * 	 * @return String	 *//* &CommunicationProperty.getServletHost1& */	public static String getServletHost1()	{		return csServletHost1;	}	/**	 * Return the ServletHost2 value.	 * 	 * @return String	 *//* &CommunicationProperty.getServletHost2& */	public static String getServletHost2()	{		return csServletHost2;	}	/**	 * Return the ServletName1 value.	 * 	 * @return String	 *//* &CommunicationProperty.getServletName1& */	public static String getServletName1()	{		return csServletName1;	}	/**	 * Return the ServletName2 value.	 * 	 * @return String	 *//* &CommunicationProperty.getServletName2& */	public static String getServletName2()	{		return csServletName2;	}	/**	 * Return the ServletPort1 value.	 * 	 * @return String	 *//* &CommunicationProperty.getServletPort1& */	public static String getServletPort1()	{		return csServletPort1;	}	/**	 * Return the ServletPort2 value.	 * 	 * @return String	 *//* &CommunicationProperty.getServletPort2& */	public static String getServletPort2()	{		return csServletPort2;	}	/**	 * Return the TxOVersion value.	 * 	 * @return String	 *//* &CommunicationProperty.getTxOVersion& */	public static String getTxOVersion()	{		return csTxOVersion;	}	/**	 * Return the TxdotServer value.	 * 	 * @return String	 *//* &CommunicationProperty.getTxdotServer& */	public static String getTxdotServer()	{		return csTxdotServer;	}	/**	 * Return the TxdotServer1 value.	 * 	 * @return String	 *//* &CommunicationProperty.getTxdotServer1& */	public static String getTxdotServer1()	{		return csTxdotServer1;	}	/**	 * Return the URL value.	 * 	 * @return String	 *//* &CommunicationProperty.getURL& */	public static String getURL()	{		return csUrl;	}		/**	 * Return the UseMQ value.	 * 	 * @return boolean	 *//* &CommunicationProperty.getUseMQ& */	public static boolean getUseMQ()	{		return lbUseMQ;	}		/**	 * Set the UseMQ value.	 * 	 *//* &CommunicationProperty.setUseMQ& */	public static void setUseMQ(boolean abUseMQ)	{		lbUseMQ = abUseMQ;	}	/**	 * Used to determine if we are going to use the proxy or not.	 * 	 * @return boolean	 *//* &CommunicationProperty.getVendorPayRptUseProxy& */	public static boolean getVendorPayRptUseProxy()	{		// defect 8368		return cbVendorPayRptUseProxy;		// end defect 8368	}	/**	 * Gets the Web Service Host Name.	 * 	 * @return String	 *//* &CommunicationProperty.getWebServiceHost& */	public static String getWebServiceHost()	{		return csWebServiceHost;	}	/**	 * Gets the Web Service Name.	 * 	 * @return String	 *//* &CommunicationProperty.getWebServiceName& */	public static String getWebServiceName()	{		return csWebServiceName;	}	/**	 * Gets the Web Service Port.	 * 	 * @return String	 *//* &CommunicationProperty.getWebServicePort& */	public static String getWebServicePort()	{		return csWebServicePort;	}	/**	 * Main method that is called at first load.	 *//* &CommunicationProperty.init& */	private static void init()	{		try		{			// A. Common (Environment and csRegion)					System.out.println(MSG_TRYING_TO_RESOLVE);			InputStream pfsInputStream = null;			pfsInputStream =				ClassLoader.getSystemResourceAsStream(					TXO_ENV_FILE_NAME);			// defect 8553				FileInputStream laFIS = null;			Properties laEnvProp = new Properties();			// end defect 8553				if (pfsInputStream != null)			{				// find the env property file in TexasOnline				csEnvironment = TXT_TEXASONLINE;				// defect 8925				laEnvProp.load(pfsInputStream);				// end defect 8925				System.out.println(MSG_RUNNING_AS_TEXASONLINE);			}			else			{				// try to find it in Txdot 				try				{					// defect 8553					// Try to load txdot properties if texasonline is 					// not found.					// System.out.println(					// "Getting property file "					// + System.getProperty("user.dir")					// + "/"					// + TXDOT_ENV_FILE_NAME);					System.out.println(						"Getting property file" + TXDOT_ENV_FILE_NAME);					// defect 8925					// use getResourceAsStream to read all properties					// files except Configuration.properties					//					pfsInputStream =					//						ClassLoader.getSystemResourceAsStream(					//							TXDOT_ENV_FILE_NAME);					pfsInputStream =						CommunicationProperty							.class							.getClassLoader()							.getResourceAsStream(							TXDOT_ENV_FILE_NAME);					// end defect 8925 									//new FileInputStream(TXDOT_ENV_FILE_NAME);					if (pfsInputStream == null)					{						try						{							laFIS =								new FileInputStream(TXDOT_ENV_FILE_NAME);							if (laFIS != null)							{								laEnvProp.load(laFIS);								// find the env property file in TxDOT								csEnvironment = TXT_TXDOT_SERVER;								System.out.println(									MSG_RUNNING_AS_TXDOT_SERVER);							}						}						catch (Exception ex)						{							ex.printStackTrace();						}						// find the env property file in TxDOT					}					else					{						laEnvProp.load(pfsInputStream);						// find the env property file in TxDOT						csEnvironment = TXT_TXDOT_SERVER;						System.out.println(MSG_RUNNING_AS_TXDOT_SERVER);					}				}				// end defect 8553				catch (Exception aeEx)				{					aeEx.printStackTrace();				}			}			// defect 8553			if (pfsInputStream == null && laFIS == null)				// end defect 8553			{				System.out.println(					new java.util.Date()						+ MSG_COULD_NOT_FIND_PROPERTY_FILE);			}			// defect 8553			// pfsInputStream.close();			// end defect 8553			// if the csEnvironment file is not loaded, 			// let it error out,			// so we know for sure the application will not start.			// defect 8553			// laEnvProp loaded above			// Properties laEnvProp = new Properties();			// laEnvProp.load(pfsInputStream);			// end defect 8553			if (csEnvironment.equalsIgnoreCase(TXT_TEXASONLINE))			{				String lsDev = laEnvProp.getProperty(TXT_INDEV);				String lsTest = laEnvProp.getProperty(TXT_INTEST);				// The Configuration.properties file setting:				// INDEV=true if in Dev				// INTEST=true if in Test				// INDEV=false, INTEST=false if in Prod				// This is the way it is.				if (lsDev != null && lsDev.equalsIgnoreCase(TXT_TRUE))				{					csRegion = TXT_DEV;				}				else if (					lsTest != null						&& lsTest.equalsIgnoreCase(TXT_TRUE))				{					csRegion = TXT_TEST;				}				else if (					lsDev != null						&& lsDev.equalsIgnoreCase(TXT_FALSE)						&& lsTest != null						&& lsTest.equalsIgnoreCase(TXT_FALSE))				{					csRegion = TXT_PROD;				}			}			else			{				csRegion = laEnvProp.getProperty(TXT_REGION);			}			// defect 8553			if (pfsInputStream != null)			{				pfsInputStream.close();			}			if (laFIS != null)			{				laFIS.close();			}			// end defect 8553			if (csRegion == null)			{				System.out.println(					MSG_CANNOT_DETERMINE_IF_TEST_OR_PROD);			}			// let it error out if csRegion cannot be determined.				csPropertyFileName =				csPropertyFileName					+ TXT_RTSWEBAPPS					+ csRegion.toLowerCase()					+ TXT_DOT_PROPERTIES;			// defect 8553			//			System.out.println(			//				"Getting property file "			//					+ System.getProperty("user.dir")			//					+ "/"			//					+ csPropertyFileName);			System.out.println(				"Getting property file" + csPropertyFileName);			// always use getSystemResourceAsStream			// if (csEnvironment.equalsIgnoreCase("texasonline"))			// defect 8925			// use getResourceAsStream to read all properties			// files except Configuration.properties			//			pfsInputStream =			//				ClassLoader.getSystemResourceAsStream			//				(csPropertyFileName);			pfsInputStream =				CommunicationProperty					.class					.getClassLoader()					.getResourceAsStream(					csPropertyFileName);			// end defect 8925 					if (pfsInputStream == null)			{				try				{					laFIS = new FileInputStream(csPropertyFileName);					if (laFIS != null)					{						// find the env property file in TxDOT						caConnectionProperties.load(laFIS);					}				}				catch (Exception ex)				{					ex.printStackTrace();				}			}			else				//pfsInputStream = new FileInputStream				//(csPropertyFileName);							{				caConnectionProperties.load(pfsInputStream);			}			// defect 8250			if (pfsInputStream != null)			{				pfsInputStream.close();			}			if (laFIS != null)			{				laFIS.close();			}			// defect 8925			// use getResourceAsStream to read all properties			// files except Configuration.properties			//			pfsInputStream =			//				ClassLoader.getSystemResourceAsStream			//				(IVTRS_VERSION_FILE_NAME);			pfsInputStream =				CommunicationProperty					.class					.getClassLoader()					.getResourceAsStream(					IVTRS_VERSION_FILE_NAME);			// end defect 8925 											if (pfsInputStream == null)			{				try				{					laFIS =						new FileInputStream(IVTRS_VERSION_FILE_NAME);					if (laFIS != null)					{						// find the env property file in TxDOT						caConnectionProperties.load(laFIS);					}				}				catch (Exception ex)				{					ex.printStackTrace();				}			}			else				//pfsInputStream = new FileInputStream				//(csPropertyFileName);							{				caConnectionProperties.load(pfsInputStream);			}			// end defect 8250			// end defect 8553			trimValues();			setValues();			printValues();			// defect 8553			if (pfsInputStream != null)			{				pfsInputStream.close();			}			if (laFIS != null)			{				laFIS.close();			}			// end defect 8553			}		catch (Exception aeEx)		{			aeEx.printStackTrace();		}	}	/**	 * Main method this will call init.	 * 	 * @param args	 *//* &CommunicationProperty.main& */	public static void main(String[] args)	{		System.out.println(MSG_MAIN_LOAD_PROPS);	}	/**	 * Used to print all the values out to the console.	 *//* &CommunicationProperty.printValues& */	private static void printValues()	{		// A. Common		System.out.println(MSG_COMM_PROP_ENV + getEnvironment());		System.out.println(MSG_COMM_PROP_REG + getRegion());		// B. TexasOnline			System.out.println(MSG_COMM_PORT_TEXASONLINE_START);		System.out.println(			MSG_COMM_PROP_SERVLET_HOST_1 + getServletHost1());		System.out.println(			MSG_COMM_PROP_SERVLET_PORT_1 + getServletPort1());		System.out.println(			MSG_COMM_PROP_SERVLET_NAME_1 + getServletName1());		// defect 9121		System.out.println(			MSG_COMM_PROP_WEB_SERVICE_HOST + getWebServiceHost());		System.out.println(			MSG_COMM_PROP_WEB_SERVICE_NAME + getWebServiceName());		System.out.println(			MSG_COMM_PROP_WEB_SERVICE_PORT + getWebServicePort());		// end defect 9121		System.out.println(			MSG_COMM_PROP_TXDOT_SERVER + getTxdotServer());		System.out.println(			MSG_COMM_PROP_TXDOT_SERVER_1 + getTxdotServer1());		System.out.println(			MSG_COMM_PROP_MQ_TEXASONLINE_HOST + getMQTexasOnlineHost());		System.out.println(			MSG_COMM_PROP_MQ_TEXASONLINE_HOST_1				+ getMQTexasOnlineHost1());		System.out.println(			MSG_COMM_PROP_MQ_TEXASONLINE_CHANNEL				+ getMQTexasOnlineChannel());		System.out.println(			MSG_COMM_PROP_MQ_TEXASONLINE_QUEUE_MANAGER				+ getMQTexasOnlineQueueManager());		System.out.println(			MSG_COMM_PROP_MQ_TEXASONLINE_QUEUE_MANAGER_1				+ getMQTexasOnlineQueueManager1());		System.out.println(			MSG_COMM_PROP_MQ_TEXASONLINE_POST_QUEUE				+ getMQTexasOnlinePostQueue());		System.out.println(			MSG_COMM_PROP_MQ_TEXASONLINE_RET_QUEUE				+ getMQTexasOnlineRetrieveQueue());		System.out.println(			MSG_COMM_PROP_MQ_TEXASONLINE_PORT + getMQTexasOnlinePort());		System.out.println(MSG_COMM_PROP_URL + getURL());		System.out.println(MSG_COMM_PROP_OLDURL + getOldURL());		System.out.println(MSG_COMM_PROP_EPAYURL + getEpayURL());		Enumeration propNames = caConnectionProperties.propertyNames();		while (propNames.hasMoreElements())		{			String name = (String) propNames.nextElement();			if (name.startsWith(TXT_NOTPARTICIPATELINK))			{				System.out.println(					TXT_COMM_PROP						+ name						+ CommonConstant.STR_EQUAL						+ caConnectionProperties.getProperty(name));			}		}		System.out.println(MSG_COMM_PROP_TEXASONLINE_END);		// C. Txdot		System.out.println(MSG_COMM_PROP_TXDOT_START);		System.out.println(			MSG_COMM_PROP_SERVLET_HOST_2 + getServletHost2());		System.out.println(			MSG_COMM_PROP_SERVLET_PORT_2 + getServletPort2());		System.out.println(			MSG_COMM_PROP_SERVLET_NAME_2 + getServletName2());		// defect 8777		System.out.println(MSG_COMM_PROP_TxOVersion + getTxOVersion());		// end defect 8777			System.out.println(			MSG_COMM_PROP_MQ_TXDOT_HOST + getMQTxdotHost());		System.out.println(			MSG_COMM_PROP_MQ_TXDOT_HOST_1 + getMQTxdotHost1());		System.out.println(			MSG_COMM_PROP_TXDOT_CHANNNEL + getMQTxdotChannel());		System.out.println(			MSG_COMM_PROP_MQ_TXDOT_QUEUE_MANAGER				+ getMQTxdotQueueManager());		System.out.println(			MSG_COMM_PROP_MQ_TXDOT_QUEUE_MANAGER_1				+ getMQTxdotQueueManager1());		System.out.println(			MSG_COMM_PROP_MQ_TXDOT_POST_QUEUE + getMQTxdotPostQueue());		System.out.println(			MSG_COMM_PROP_MQ_TXDOT_PORT + getMQTxdotPort());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_HOST + getEpayVendorHost());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_LOGIN_PAGE				+ getEpayVendorLoginPage());		System.out.println(			MSG_COMM_PROP_VENDOR_REPORT_PAGE				+ getEpayVendorReportPage());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_USER + getEpayVendorUser());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_PASSWORD				+ getEpayVendorPassword());		// defect 8368		System.out.println(			MSG_COMM_PROP_VENDORPAYRPT_PROXY_FLAG				+ getVendorPayRptUseProxy());		System.out.println(			MSG_COMM_PROP_REFUND_PAYMENT_PROXY_FLAG				+ getRefundPaymentUseProxy());		// end defect 8368		System.out.println(MSG_COMM_PROP_PROXY_HOST + getProxyHost());		System.out.println(MSG_COMM_PROP_PROXY_PORT + getProxyPort());		System.out.println(MSG_COMM_PROP_PROXY_REALM + getProxyRealm());		System.out.println(MSG_COMM_PROP_PROXY_USER + getProxyUser());		System.out.println(			MSG_COMM_PROP_PROXY_PASSWORD + getProxyPassword());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_USER_TAG				+ getEpayVendorUserTag());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_PASSWORD_TAG				+ getEpayVendorPasswordTag());		System.out.println(			MAG_COMM_PROP_EPAY_VENDOR_DATE_START_TAG				+ getEpayVendorDateStartTag());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_DATE_END_TAG				+ getEpayVendorDateEndTag());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_ID_TAG				+ getEpayVendorVendorIdTag());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_TRACE_NUM_TAG				+ getEpayVendorTraceNumTag());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_PAYMENT_TYPE_TAG				+ getEpayVendorPaymentTypeTag());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_DISPLAY_NUM_TAG				+ getEpayVendorDisplayNumTag());		System.out.println(			MSG_COMM_PROP_EPAY_VENDOR_PARSE_METHOD_VERSION				+ getEpayVendorParseMethodVersion());		// logs		System.out.println(MSG_COMM_PROP_LOG_LEVEL + getLogLevel());		System.out.println(			MSG_COMM_PROP_LOG_FILE_NAME + getLogFileName());		System.out.println(			MSG_COMM_PROP_ERROR_FILE_NAME + getErrorFileName());		System.out.println(			MSG_COMM_PROP_MQ_LOG_FILE_NAME + getMQLogFileName());		System.out.println(			MSG_COMM_PROP_MQ_ERROR_FILE_NAME + getMQErrorFileName());		System.out.println(			MSG_COMM_PROP_BATCH_LOG_FILE_NAME + getBatchLogFileName());		System.out.println(			MSG_COMM_PROP_BATCH_ERROR_FILE_NAME				+ getBatchErrorFileName());		// defect 9121		System.out.println(			MSG_COMM_PROP_AUTO_CREATE_SP_TRANS				+ getAutoCreateSPPOSTrans());		// end defect 9121		System.out.println(MSG_COMM_PROP_TXDOT_END);		// D. Misc		// defect 8368		//System.out.println(		//			MSG_COMM_PROP_REFUND_INFO_PROXY_ON		//				+ getRefundInfoProxyOn());		// end defect 8368		System.out.println(MSG_COMM_PROP_USE_MQ + getUseMQ());		System.out.println(MSG_COMM_PROP_LINK_PREFIX + getLinkPrefix());		// defect 8250		System.out.println(TXT_IVTRS_VERSION + getIVTRSVersion());		// end defect 8250				// defect 9601		System.out.println(TXT_IVTRS_VERSION_DATE + getIVTRSVersionDate());		// end defect 9601				// defect 11232		System.out.println(TXT_SP_IMAGES_DIR + getSPImagesDir());		// end defect 11232	}	/**	 * This allows anyone to call this method to set	 * the Link Prefix.  This is usually the Context.	 * This is called at the top of the main menu jsp.	 * 	 * @param asLinkPrefix String	 *//* &CommunicationProperty.setLinkPrefix& */	public static void setLinkPrefix(String asLinkPrefix)	{		lsLinkPrefix = asLinkPrefix;	}	/**	 * Change the communication properties to communicate	 * to another resource.	 *//* &CommunicationProperty.setValues& */	private static void setValues()	{		// A. Common (Environment and csRegion, done is init)		// B. TexasOnline		// (1) Server		csServletHost1 =			caConnectionProperties.getProperty("ServletHost_1");		csServletPort1 =			caConnectionProperties.getProperty("ServletPort_1");		csServletName1 =			caConnectionProperties.getProperty("ServletName_1");		// defect 9121		// Web Service		csWebServiceHost =			caConnectionProperties.getProperty("WebServiceHost");		csWebServiceName =			caConnectionProperties.getProperty("WebServiceName");		csWebServicePort =			caConnectionProperties.getProperty("WebServicePort");		// end defect 9121		// TxDOT app servers 		csTxdotServer =			caConnectionProperties.getProperty("TxdotServer");		csTxdotServer1 =			caConnectionProperties.getProperty("TxdotServer1");		// (1) MQ Series		csMQTexasOnlineHost =			caConnectionProperties.getProperty("MQTexasOnlineHost");		// This is extra for test, production			csMQTexasOnlineHost1 =			caConnectionProperties.getProperty("MQTexasOnlineHost1");		csMQTexasOnlineChannel =			caConnectionProperties.getProperty("MQTexasOnlineChannel");		csMQTexasOnlineQueueManager =			caConnectionProperties.getProperty(				"MQTexasOnlineQueueManager");		// This is extra for test, production			csMQTexasOnlineQueueManager1 =			caConnectionProperties.getProperty(				"MQTexasOnlineQueueManager1");		csMQTexasOnlinePostQueue =			caConnectionProperties.getProperty(				"MQTexasOnlinePostQueue");		csMQTexasOnlineRetrieveQueue =			caConnectionProperties.getProperty(				"MQTexasOnlineRetrieveQueue");		ciMQTexasOnlinePort =			(new Integer(caConnectionProperties				.getProperty("MQTexasOnlinePort")))				.intValue();		// for redirecting to https		csUrl = caConnectionProperties.getProperty("URL");		csOldUrl = caConnectionProperties.getProperty("OldURL");		// Epay		csEpayUrl = caConnectionProperties.getProperty("EpayURL");		// C. Txdot		// (1) Server		csServletHost2 =			caConnectionProperties.getProperty("ServletHost_2");		csServletPort2 =			caConnectionProperties.getProperty("ServletPort_2");		csServletName2 =			caConnectionProperties.getProperty("ServletName_2");		// defect 8777		csTxOVersion = caConnectionProperties.getProperty("TxOVersion");		// end defect 8777				// (2) MQSeries 			csMQTxdotHost =			caConnectionProperties.getProperty("MQTxdotHost");		// This is extra for production		csMQTxdotHost1 =			caConnectionProperties.getProperty("MQTxdotHost1");		csMQTxdotChannel =			caConnectionProperties.getProperty("MQTxdotChannel");		csMQTxdotQueueManager =			caConnectionProperties.getProperty("MQTxdotQueueManager");		// This is extra for production		csMQTxdotQueueManager1 =			caConnectionProperties.getProperty("MQTxdotQueueManager1");		csMQTxdotPostQueue =			caConnectionProperties.getProperty("MQTxdotPostQueue");		ciMQTxdotPort =			(new Integer(caConnectionProperties				.getProperty("MQTxdotPort")))				.intValue();		// (3) Epay Vendor Report		csEpayVendorHost =			caConnectionProperties.getProperty("EpayVendorHost");		csEpayVendorLoginPage =			caConnectionProperties.getProperty("EpayVendorLoginPage");		csEpayVendorReportPage =			caConnectionProperties.getProperty("EpayVendorReportPage");		csEpayVendorUser =			caConnectionProperties.getProperty("EpayVendorUser");		csEpayVendorPassword =			caConnectionProperties.getProperty("EpayVendorPassword");		csEpayVendorUserTag =			caConnectionProperties.getProperty("EpayVendorUserTag");		csEpayVendorPasswordTag =			caConnectionProperties.getProperty("EpayVendorPasswordTag");		csEpayVendorDateStartTag =			caConnectionProperties.getProperty(				"EpayVendorDateStartTag");		csEpayVendorDateEndTag =			caConnectionProperties.getProperty("EpayVendorDateEndTag");		csEpayVendorVendorIdTag =			caConnectionProperties.getProperty("EpayVendorVendorIdTag");		csEpayVendorTraceNumTag =			caConnectionProperties.getProperty("EpayVendorTraceNumTag");		csEpayVendorPaymentTypeTag =			caConnectionProperties.getProperty(				"EpayVendorPaymentTypeTag");		csEpayVendorDisplayNumTag =			caConnectionProperties.getProperty(				"EpayVendorDisplayNumTag");		csEpayVendorParseMethodVersion =			caConnectionProperties.getProperty(				"EpayVendorParseMethodVersion");		// (4) Proxy Server		// defect 8368		// Get the value that determines if we are going to use the		// proxy or not.		String lsVendorPaymentRptUseProxy =			caConnectionProperties.getProperty(				"VendorPaymentRptUseProxy");		if (lsVendorPaymentRptUseProxy != null)		{			cbVendorPayRptUseProxy =				(new Boolean(lsVendorPaymentRptUseProxy))					.booleanValue();		}		// end defect 8368		csProxyHost = caConnectionProperties.getProperty("ProxyHost");		ciProxyPort =			(new Integer(caConnectionProperties				.getProperty("ProxyPort")))				.intValue();		csProxyRealm = caConnectionProperties.getProperty("ProxyRealm");		csProxyUser = caConnectionProperties.getProperty("ProxyUser");		csProxyPassword =			caConnectionProperties.getProperty("ProxyPassword");		// (5) log and error log file names		csLogLevel = caConnectionProperties.getProperty("LogLevel");		csLogFileName =			caConnectionProperties.getProperty("LogFileName");		csErrorFileName =			caConnectionProperties.getProperty("ErrorFileName");		csMQLogFileName =			caConnectionProperties.getProperty("MQLogFileName");		csMQErrorFileName =			caConnectionProperties.getProperty("MQErrorFileName");		csBatchLogFileName =			caConnectionProperties.getProperty("BatchLogFileName");		csBatchErrorFileName =			caConnectionProperties.getProperty("BatchErrorFileName");					// defect 9121		// (6) Special Plates		String lsAutoCreateSPPOSTrans =			caConnectionProperties.getProperty(				"AutoCreateSpclPltPOSTrans");		if (lsAutoCreateSPPOSTrans != null)		{			cbAutoCreateSPPOSTrans =				(new Boolean(lsAutoCreateSPPOSTrans)).booleanValue();		}		// end defect 9121		// D. Misc		lbUseMQ =			(new Boolean(caConnectionProperties.getProperty("UseMQ")))				.booleanValue();		// defect 8368		//		String refundInfoProxy =		//		caConnectionProperties.getProperty("RefundInfoProxyOn");		//		if (refundInfoProxy != null)		//		{		//			lbRefundInfoProxyOn =		//				(new Boolean(refundInfoProxy)).booleanValue();		//		}				String lsRefundPaymentUseProxy =			caConnectionProperties.getProperty("RefundPaymentUseProxy");		if (lsRefundPaymentUseProxy != null)		{			cbRefundPaymentUseProxy =				(new Boolean(lsRefundPaymentUseProxy)).booleanValue();			// end defect 8368				}		// defect 8925		//		if (csEnvironment.equalsIgnoreCase(TXT_TXDOT_SERVER))		//		{		//			lsLinkPrefix = CommonConstant.STR_SPACE_EMPTY;		//		}		//		else		//		{		lsLinkPrefix = "/NASApp/txdotrts";		//		}		// end defect 8925		// defect 8250		csIVTRSVersion =			caConnectionProperties.getProperty("IVTRSVersionNo");		// end defect 8250				// defect 9601		ssIVTRSVersionDate =			caConnectionProperties.getProperty("IVTRSVersionDate");		// end defect 9601				// defect 11232		ssSPImagesDir =			caConnectionProperties.getProperty("spimagesdir");		// end defect 11232	}	/**	 * Trims the values in the properties file.	 *//* &CommunicationProperty.trimValues& */	private static void trimValues()	{		Enumeration propNames = caConnectionProperties.propertyNames();		while (propNames.hasMoreElements())		{			String lsName = (String) propNames.nextElement();			String lsValue = caConnectionProperties.getProperty(lsName);			if (lsValue != null)			{				lsValue = lsValue.trim();				caConnectionProperties.setProperty(lsName, lsValue);			}		}	}	/**	 * Return the csIVTRSVersion value.	 * This is called from the txdot_vtr_help.jsp	 * 	 * @return String	 *//* &CommunicationProperty.getIVTRSVersion& */	public static String getIVTRSVersion()	{		return csIVTRSVersion;	}	/**	 * This allows the csIVTRSVersion to be set from 	 * CommunicationPropety file read	 * 	 * @param asIVTRSVersion String	 *//* &CommunicationProperty.setIVTRSVersion& */	public static void setIVTRSVersion(String asIVTRSVersion)	{		csIVTRSVersion = asIVTRSVersion;	}	/**	 * get the ssIVTRSVersionDate 	 * 	 * @return String	 *//* &CommunicationProperty.getIVTRSVersionDate& */	public static String getIVTRSVersionDate()	{		return ssIVTRSVersionDate;	}	/**	 * set the IVTRSVersionDate gotten from the version.cfg file	 * 	 * @param string asIVTRSVersionDate	 *//* &CommunicationProperty.setIVTRSVersionDate& */	public static void setIVTRSVersionDate(String asIVTRSVersionDate)	{		ssIVTRSVersionDate = asIVTRSVersionDate;	}	/**	 * @return the ssSPImagesDir	 *//* &CommunicationProperty.getSPImagesDir& */	public static String getSPImagesDir()	{		return ssSPImagesDir;	}	/**	 * @param ssSPImagesDir the ssSPImagesDir to set	 *//* &CommunicationProperty.setSPImagesDir& */	public static void setSPImagesDir(String asSPImagesDir)	{		CommunicationProperty.ssSPImagesDir = asSPImagesDir;	}}/* #CommunicationProperty# */