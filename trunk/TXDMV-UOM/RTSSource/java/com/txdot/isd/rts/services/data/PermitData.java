package com.txdot.isd.rts.services.data;import java.io.Serializable;import java.lang.reflect.Field;import java.util.HashMap;import java.util.Map;import java.util.Vector;import com.txdot.isd.rts.services.cache.BusinessPartnerCache;import com.txdot.isd.rts.services.cache.OfficeIdsCache;import com.txdot.isd.rts.services.util.Displayable;import com.txdot.isd.rts.services.util.Dollar;import com.txdot.isd.rts.services.util.RTSDate;import com.txdot.isd.rts.services.util.UtilityMethods;import com.txdot.isd.rts.services.util.constants.CommonConstant;import com	.txdot	.isd	.rts	.services	.util	.constants	.MiscellaneousRegConstant;import com.txdot.isd.rts.services.util.constants.RegistrationConstant;/* * PermitData.java * * (c) Texas Department of Transportation 2010 * --------------------------------------------------------------------- * Change History: * Name			Date		Description * ------------	-----------	-------------------------------------------- * K Harrell	05/24/2010	Created * 							defect 10491 Ver 6.5.0  * K Harrell	06/09/2010	Add caVIAllocData, csTransEmpId,  * 							 csVehRegPltNo, ciDelIndi, get/set methods  * 							defect 10491 Ver 6.5.0 * K Harrell	06/21/2010	add initPartialsForOne() * 							defect 10491 Ver 6.5.0   * K Harrell	06/30/2010	add VehMkDesc, BulkPrmtVendorId,  * 							 get/set methods  * 							defect 10491 Ver 6.5.0  * K Harrell	07/07/2010	add ciIssuedMFDwnCd, get/set methods * 							defect 10491 Ver 6.5.0  * K Harrell	07/12/2010	Only default to TX if Record Found  * 							modify PermitData(VehicleInquiryData)  * 							defect 10491 Ver 6.5.0 * K Harrell	07/14/2010	modify initPartialsForOne() * 							defect 10491 Ver 6.5.0   * K Harrell	08/11/2010	Do not copy "NOPLATE" to PermitData * 							modify PermitData(VehicleInquiryData)  * 							defect 10491 Ver 6.5.0  * K Harrell	01/07/2011	add isIssuedByBulkPrmtVendor(),  * 							 getIssuingOfcName(), getIssueDate()  * 							defect 10726 Ver 6.7.0 * K Harrell	06/18/2011	add cbModPtTrans, csVehTypeCd, * 							 csAuditTrailTransId, cvPriorModTransList,  * 							 get/set methods   * 							add isCurrent(), isFuture(), is30DayPT(), * 							 isOTPTor30PT(), hasPriorModTrans(), * 							 isMotorcycle(), isRegular(),  * 							 getLastTransId(), hasIssuedMotorcyclePermit() * 							add cvPriorModTransList, get/set methods * 							delete getIssueDate()  * 							modify getIssuingOfcName()  * 							defect 10844 Ver 6.8.0  * --------------------------------------------------------------------- *//** * This Data class contains attributes and get set methods for  * PermitData  * * @version	6.8.0 			06/18/2011 * @author	Kathy Harrell  * <br>Creation Date:		05/24/2010 12:59:17 *//* &PermitData& */public class PermitData	extends TimedPermitData	implements Serializable, Displayable{	// Object /* &PermitData'caCustomerData& */	private CustomerData caCustomerData = null;/* &PermitData'caPrmtPdAmt& */	private Dollar caPrmtPdAmt;/* &PermitData'caVIAllocData& */	private InventoryAllocationData caVIAllocData;	// boolean/* &PermitData'cbByPrmtId& */	private boolean cbByPrmtId;	//	defect 10844 /* &PermitData'cbPrmDupTrans& */	private boolean cbPrmDupTrans;	// int/* &PermitData'ciDelIndi& */	private int ciDelIndi;/* &PermitData'ciIssuedMFDwnCd& */	private int ciIssuedMFDwnCd;/* &PermitData'ciMFDwnCd& */	private int ciMFDwnCd;/* &PermitData'ciNo30DayPrmts& */	private int ciNo30DayPrmts;/* &PermitData'ciNoMFRecs& */	private int ciNoMFRecs;/* &PermitData'ciVehModlYr& */	private int ciVehModlYr;	// String /* &PermitData'csAcctItmCd& */	private String csAcctItmCd;/* &PermitData'csBulkPrmtVendorId& */	private String csBulkPrmtVendorId;/* &PermitData'csPrmtIssuanceId& */	private String csPrmtIssuanceId;/* &PermitData'csPrmtNo& */	private String csPrmtNo;/* &PermitData'csTransCd& */	private String csTransCd;/* &PermitData'csTransEmpId& */	private String csTransEmpId;/* &PermitData'csVehBdyType& */	private String csVehBdyType;/* &PermitData'csVehMk& */	private String csVehMk;/* &PermitData'csVehMkDesc& */	private String csVehMkDesc;/* &PermitData'csVehRegCntry& */	private String csVehRegCntry;/* &PermitData'csVehRegPltNo& */	private String csVehRegPltNo;/* &PermitData'csVin& */	private String csVin;	// Vector /* &PermitData'cvPartialPrmtDataList& */	private Vector cvPartialPrmtDataList = new Vector();	// defect 10844/* &PermitData'cbModPtTrans& */	private boolean cbModPtTrans;/* &PermitData'csAuditTrailTransId& */	private String csAuditTrailTransId;/* &PermitData'csVehTypeCd& */	private String csVehTypeCd;/* &PermitData'cvPriorModTransList& */	private Vector cvPriorModTransList = new Vector();/* &PermitData'serialVersionUID& */	static final long serialVersionUID = 905671892255957164L;	/**	 * PermitData.java Constructor	 * 	 *//* &PermitData.PermitData& */	public PermitData()	{		super();	}	/**	 * PermitData.java Constructor	 * 	 *//* &PermitData.PermitData$1& */	public PermitData(VehicleInquiryData aaVehInqData)	{		super();		if (aaVehInqData != null)		{			if (aaVehInqData.getMfVehicleData() != null)			{				MFVehicleData laMFVehData =					aaVehInqData.getMfVehicleData();				if (laMFVehData.getVehicleData() != null)				{					VehicleData laVehData =						laMFVehData.getVehicleData();					ciVehModlYr = laVehData.getVehModlYr();					csVehBdyType = laVehData.getVehBdyType();					csVehMk = laVehData.getVehMk();					ciNoMFRecs = aaVehInqData.getNoMFRecs();					csVin = laVehData.getVin();					ciMFDwnCd = aaVehInqData.isMFDown() ? 1 : 0;					// defect 10844 					csVehTypeCd = aaVehInqData.getVehTypeCdforPermit();					// end defect 10844  				}				if (aaVehInqData.isRecordFound())				{					RegistrationData laRegData =						laMFVehData.getRegData();					if (laRegData != null)					{						String lsPltNo = laRegData.getRegPltNo();						if (lsPltNo == null							|| !lsPltNo.equals(								RegistrationConstant.NOPLATE))						{							csVehRegPltNo = laRegData.getRegPltNo();						}						setVehRegState(CommonConstant.STR_TX);					}				}			}		}	}	/**	 * Gets value of csAcctItmCd	 * 	 * @return String	 *//* &PermitData.getAcctItmCd& */	public String getAcctItmCd()	{		return csAcctItmCd;	}	/**	 * Method used to return field attributes. 	 * 	 * @return Map	 *//* &PermitData.getAttributes& */	public Map getAttributes()	{		HashMap lhmHashMap = new HashMap();		Field[] larrFields = this.getClass().getDeclaredFields();		for (int i = 0; i < larrFields.length; i++)		{			try			{				lhmHashMap.put(					larrFields[i].getName(),					larrFields[i].get(this));			}			catch (IllegalAccessException aeIllAccEx)			{				continue;			}		}		return lhmHashMap;	}	/**	 * Get value of csAuditTrailTransId	 * 	 * @return String	 *//* &PermitData.getAuditTrailTransId& */	public String getAuditTrailTransId()	{		return csAuditTrailTransId;	}	/**	 * Return value of csBulkPrmtVendorId	 * 	 * @return String	 *//* &PermitData.getBulkPrmtVendorId& */	public String getBulkPrmtVendorId()	{		return csBulkPrmtVendorId;	}	/**	 * Gets value of caCustomerData	 * 	 * @return CustomerData	 *//* &PermitData.getCustomerData& */	public CustomerData getCustomerData()	{		if (caCustomerData == null)		{			caCustomerData = new CustomerData();		}		return caCustomerData;	}	/**	 * Returns ciDelIndi	 * 	 * @return int	 *//* &PermitData.getDelIndi& */	public int getDelIndi()	{		return ciDelIndi;	}	/**	 * Returns ciIssuedMFDwnCd   	 * 	 * @return int 	 *//* &PermitData.getIssuedMfDwnCd& */	public int getIssuedMfDwnCd()	{		return ciIssuedMFDwnCd;	}	/** 	 * Return Issuing Office Name 	 * 	 * @return String 	 *//* &PermitData.getIssuingOfcName& */	public String getIssuingOfcName()	{		// defect 10844		// Implement AuditTrailTransId as data associated w/ last 		//  transaction affecting Permit		TransactionIdData laTransIdData =			new TransactionIdData(getLastTransId());		String lsIssuingOfcName = new String();		if (isIssuedByBulkPrmtVendor())		{			BusinessPartnerData laBPData =				BusinessPartnerCache.getTimedPermitVendor(					getBulkPrmtVendorId(),					laTransIdData.getTransactionDateYYYYMMDD());			// end defect 10844			if (laBPData != null && laBPData.getName1() != null)			{				lsIssuingOfcName = laBPData.getName1().trim();			}		}		else		{			OfficeIdsData laOfcData =				OfficeIdsCache.getOfcId(					laTransIdData.getOfcIssuanceNo());			if (laOfcData != null)			{				lsIssuingOfcName = laOfcData.getOfcName();				if (laOfcData.isCounty())				{					lsIssuingOfcName =						lsIssuingOfcName + CommonConstant.COUNTY_ABBR;				}				else if (laOfcData.isRegion())				{					int liPos =						lsIssuingOfcName.indexOf(							CommonConstant.REGIONAL_OFFICE);					// defect 10844 					if (liPos != -1)					{						lsIssuingOfcName =							lsIssuingOfcName.substring(0, liPos).trim();					}					// end defect 10844 					lsIssuingOfcName =						lsIssuingOfcName + CommonConstant.REGION_ABBR;				}			}		}		return lsIssuingOfcName;	}	/**	 * 	 * Method description	 * 	 * @return	 *//* &PermitData.getLastTransId& */	public String getLastTransId()	{		return UtilityMethods.isEmpty(getAuditTrailTransId())			? getPrmtIssuanceId()			: getAuditTrailTransId();	}	/**	 * Returns ciMFDwnCd   	 * 	 * @return int 	 *//* &PermitData.getMfDwnCd& */	public int getMfDwnCd()	{		return ciMFDwnCd;	}	/**	 * Return Number of 30 Day Permits 	 * 	 * @return int	 *//* &PermitData.getNo30DayPrmts& */	public int getNo30DayPrmts()	{		return ciNo30DayPrmts;	}	/**	 * Sets value of ciNoMFRecs 	 * 	 * @return int	 *//* &PermitData.getNoMFRecs& */	public int getNoMFRecs()	{		return ciNoMFRecs;	}	/**	 * Gets value of cvPartialPrmtDataList	 * 	 * @return Vector 	 *//* &PermitData.getPartialPrmtDataList& */	public Vector getPartialPrmtDataList()	{		return cvPartialPrmtDataList;	}	/**	 * Get value of cvPriorModTransList	 * 	 * @return Vector	 *//* &PermitData.getPriorModTransList& */	public Vector getPriorModTransList()	{		return cvPriorModTransList;	}	/**	 * Gets value of csPrmtIssuanceId	 * 	 * @return String	 *//* &PermitData.getPrmtIssuanceId& */	public String getPrmtIssuanceId()	{		return csPrmtIssuanceId;	}	/**	 * Gets value of csPrmtNo	 * 	 * @return String	 *//* &PermitData.getPrmtNo& */	public String getPrmtNo()	{		return csPrmtNo;	}	/**	 * Gets value of csPrmtPdAmt	 * 	 * @return Dollar	 *//* &PermitData.getPrmtPdAmt& */	public Dollar getPrmtPdAmt()	{		if (caPrmtPdAmt == null)		{			caPrmtPdAmt = new Dollar(0);		}		return caPrmtPdAmt;	}	/**	 * Gets value of csTransCd	 * 	 * @return String	 *//* &PermitData.getTransCd& */	public String getTransCd()	{		if (UtilityMethods.isEmpty(csTransCd))		{			csTransCd = getTimedPrmtType();		}		return csTransCd;	}	/**	 * Gets value of csTransEmpId	 * 	 * @return	 *//* &PermitData.getTransEmpId& */	public String getTransEmpId()	{		return csTransEmpId;	}	/**	 * Gets value of csVehBdyType	 * 	 * @return String	 *//* &PermitData.getVehBdyType& */	public String getVehBdyType()	{		return csVehBdyType;	}	/**	 * Gets value of csVehMk	 * 	 * @return String	 *//* &PermitData.getVehMk& */	public String getVehMk()	{		return csVehMk;	}	/**	 * Return value of csVehMkDesc	 * 	 * @return String 	 *//* &PermitData.getVehMkDesc& */	public String getVehMkDesc()	{		return csVehMkDesc;	}	/**	 * Gets value of ciVehModlYr	 * 	 * @return String	 *//* &PermitData.getVehModlYr& */	public int getVehModlYr()	{		return ciVehModlYr;	}	/**	 * Gets value of csVehRegCntry	 * 	 * @return String	 *//* &PermitData.getVehRegCntry& */	public String getVehRegCntry()	{		return csVehRegCntry;	}	/**	 * Gets value of csVehRegPltNo	 * 	 * @return String 	 *//* &PermitData.getVehRegPltNo& */	public String getVehRegPltNo()	{		return csVehRegPltNo;	}	/**	 * Gets value of caVIAllocData	 * 	 * @return InventoryAllocationData	 *//* &PermitData.getVIAllocData& */	public InventoryAllocationData getVIAllocData()	{		return caVIAllocData;	}	/**	 * Gets value of csVin	 * 	 * @return String	 *//* &PermitData.getVin& */	public String getVin()	{		return csVin;	}	/** 	 * Returns boolean to denote if Motorcycle	 * 	 * @return boolean 	 *//* &PermitData.hasIssuedMotorCyclePermit& */	public boolean hasIssuedMotorCyclePermit()	{		return getItmCd() != null			&& (getItmCd().equals(MiscellaneousRegConstant.ITMCD_30MCPT)				|| getItmCd().equals(					MiscellaneousRegConstant.ITMCD_OTMCPT));	}	/**	 * Return boolean to denote if cvPriorModTransList is not null, empty	 *//* &PermitData.hasPriorModTrans& */	public boolean hasPriorModTrans()	{		return (			cvPriorModTransList != null				&& cvPriorModTransList.size() > 0);	}	/** 	 * Set vector of one Partial Record 	 *	 *//* &PermitData.initPartialsForOne& */	public void initPartialsForOne()	{		Vector lvPartials = new Vector();		MFPartialPermitData laPartialData = new MFPartialPermitData();		String lsCustName =			getCustomerData().getCustNameData().getCustName(true);		laPartialData.setCustName(lsCustName);		laPartialData.setExpDate(getExpDt());		laPartialData.setVehMk(getVehMk());		laPartialData.setVehModlYr(getVehModlYr());		laPartialData.setVin(getVin());		laPartialData.setPrmtNo(getPrmtNo());		laPartialData.setItmCd(getItmCd());		laPartialData.setPrmtIssuanceId(getPrmtIssuanceId());		laPartialData.setExpTime(getExpTime());		lvPartials.add(laPartialData);		setPartialPrmtDataList(lvPartials);	}	/**	 * Returns boolean to denote if 30PT/30MCPT  	 * 	 * @return	 *//* &PermitData.is30DayPT& */	public boolean is30DayPT()	{		return getItmCd() != null			&& (getItmCd().equals(MiscellaneousRegConstant.ITMCD_30PT)				|| getItmCd().equals(					MiscellaneousRegConstant.ITMCD_30MCPT));	}	/**	 * Return boolean to denote if search by PrmtId	 * 	 * @return boolean 	 *//* &PermitData.isByPrmtId& */	public boolean isByPrmtId()	{		return cbByPrmtId;	}	/** 	 * Return boolean to denote if Permit is "Current" 	 * 	 * @return boolean 	 *//* &PermitData.isCurrent& */	public boolean isCurrent()	{		boolean lbCurrent = false;		if (getExpDt() != 0)		{			if (getRTSDateExpDt() == null)			{				setRTSDateExpDt(					new RTSDate(RTSDate.YYYYMMDD, getExpDt()));				getRTSDateExpDt().setTime(getExpTime());			}			if (getRTSDateEffDt() == null)			{				setRTSDateEffDt(					new RTSDate(RTSDate.YYYYMMDD, getEffDt()));				getRTSDateEffDt().setTime(getEffTime());			}			RTSDate laToday = new RTSDate();			if (getRTSDateEffDt().compareTo(laToday) <= 0				&& getRTSDateExpDt().compareTo(laToday) >= 0)			{				lbCurrent = true;			}		}		return lbCurrent;	}	/**	 * Return boolean to denote if Permit is Expired 	 * 	 * @return boolean 	 *//* &PermitData.isExpired& */	public boolean isExpired()	{		boolean lbExpired = true;		if (getExpDt() != 0)		{			if (getRTSDateExpDt() == null)			{				setRTSDateExpDt(					new RTSDate(RTSDate.YYYYMMDD, getExpDt()));				getRTSDateExpDt().setTime(getExpTime());			}			if (getRTSDateExpDt().compareTo(new RTSDate()) >= 0)			{				lbExpired = false;			}		}		return lbExpired;	}	/** 	 * Return boolean to denote if Permit is Future 	 * 	 * @return boolean 	 *//* &PermitData.isFuture& */	public boolean isFuture()	{		return !isCurrent() && !isExpired();	}	/**	 * Returns boolean to denote if issued by Bulk Permit Vendor  	 * 	 * @return boolean 	 *//* &PermitData.isIssuedByBulkPrmtVendor& */	public boolean isIssuedByBulkPrmtVendor()	{		return !UtilityMethods.isEmpty(getBulkPrmtVendorId());	}	/** 	 * Max Records Exceeded  	 * 	 * @return boolean 	 *//* &PermitData.isMaxRecordsExceeded& */	public boolean isMaxRecordsExceeded()	{		return cvPartialPrmtDataList != null			&& !cvPartialPrmtDataList.isEmpty()			&& ciNoMFRecs > cvPartialPrmtDataList.size();	}	/**	 * Returns boolean to denote if record created in MFDown  	 * 	 * @return boolean 	 *//* &PermitData.isMFDown& */	public boolean isMFDown()	{		return ciMFDwnCd == 1;	}	/**	 * Return boolean to denote if Modify Permit Trans 	 * 	 * @return boolean 	 *//* &PermitData.isModPtTrans& */	public boolean isModPtTrans()	{		return cbModPtTrans;	}	/**	 * Return boolean to denote that associated Vehicle is Motorcycle	 * 	 * @return boolean 	 *//* &PermitData.isMotorcycle& */	public boolean isMotorcycle()	{		return !UtilityMethods.isEmpty(csVehTypeCd)			&& csVehTypeCd.equals(				MiscellaneousRegConstant.PERMIT_MOTORCYCLE_VEHTYPECD);	}	/**	 * Returns boolean to denote if OTPT/OTMCPT  	 * 	 * @return boolean 	 *//* &PermitData.isOTPT& */	public boolean isOTPT()	{		return getItmCd() != null			&& (getItmCd().equals(MiscellaneousRegConstant.ITMCD_OTPT)				|| getItmCd().equals(					MiscellaneousRegConstant.ITMCD_OTMCPT));	}	/**	 * 	 * Method description	 * 	 * @return	 *//* &PermitData.isOTPTor30PT& */	public boolean isOTPTor30PT()	{		return !UtilityMethods.isEmpty(csAcctItmCd)			&& (csAcctItmCd.equals("OTPT") || csAcctItmCd.equals("30PT"));	}	/**	 * Return boolean to denote if Duplicate Permit Receipt 	 * 	 * @return boolean 	 *//* &PermitData.isPrmDupTrans& */	public boolean isPrmDupTrans()	{		return cbPrmDupTrans;	}	/**	 * For 30PT, OTPT, is this vehicle "Regular"	 * 	 * @return boolean 	 *//* &PermitData.isRegular& */	public boolean isRegular()	{		return !UtilityMethods.isEmpty(csVehTypeCd)			&& csVehTypeCd.equals(				MiscellaneousRegConstant.PERMIT_REGULAR_VEHTYPECD);	}	/**	 * Sets value of csAcctItmCd	 * 	 * @param asAcctItmCd	 *//* &PermitData.setAcctItmCd& */	public void setAcctItmCd(String asAcctItmCd)	{		csAcctItmCd = asAcctItmCd;	}	/**	 * Set value of csAuditTrailTransId	 * 	 * @param asAuditTrailTransId	 *//* &PermitData.setAuditTrailTransId& */	public void setAuditTrailTransId(String asAuditTrailTransId)	{		csAuditTrailTransId = asAuditTrailTransId;	}	/**	 * Set value of csBulkPrmtVendorId	 * 	 * @param asBulkPrmtVendorId	 *//* &PermitData.setBulkPrmtVendorId& */	public void setBulkPrmtVendorId(String asBulkPrmtVendorId)	{		csBulkPrmtVendorId = asBulkPrmtVendorId;	}	/**	 * Set boolean to denote if search by PrmtId	 * 	 * @param abByPrmtId	 *//* &PermitData.setByPrmtId& */	public void setByPrmtId(boolean abByPrmtId)	{		cbByPrmtId = abByPrmtId;	}	/**	 * Sets value of caCustomerData	 * 	 * @param aaCustomerData	 *//* &PermitData.setCustomerData& */	public void setCustomerData(CustomerData aaCustomerData)	{		caCustomerData = aaCustomerData;	}	/**	 * Sets value of ciDelIndi	 * 	 * @param aiDelIndi	 *//* &PermitData.setDelIndi& */	public void setDelIndi(int aiDelIndi)	{		ciDelIndi = aiDelIndi;	}	/**	 * Sets value of ciIssuedMFDwnCd	 * 	 * @param aiIssuedMFDwnCd	 *//* &PermitData.setIssuedMFDwnCd& */	public void setIssuedMFDwnCd(int aiIssuedMFDwnCd)	{		ciIssuedMFDwnCd = aiIssuedMFDwnCd;	}	/**	 * Sets value of ciMFDwnCd	 * 	 * @param aiMFDwnCd	 *//* &PermitData.setMFDwnCd& */	public void setMFDwnCd(int aiMFDwnCd)	{		ciMFDwnCd = aiMFDwnCd;	}	/**	 * Sets value of cbPrmDupTrans	 * 	 * @param abPrmDupTrans	 *//* &PermitData.setModPtTrans& */	public void setModPtTrans(boolean abModPtTrans)	{		cbModPtTrans = abModPtTrans;	}	/**	 * Sets Number of 30 Day Permits 	 * 	 * @param aiNo30DayPrmts	 *//* &PermitData.setNo30DayPrmts& */	public void setNo30DayPrmts(int aiNo30DayPrmts)	{		ciNo30DayPrmts = aiNo30DayPrmts;	}	/**	 * Sets value of ciNoMFRecs	 * 	 * @param aiNoMFRecs	 *//* &PermitData.setNoMFRecs& */	public void setNoMFRecs(int aiNoMFRecs)	{		ciNoMFRecs = aiNoMFRecs;	}	/**	 * Sets value of cvPartialPrmtDataList	 * 	 * @param avPartialPrmtDataList	 *//* &PermitData.setPartialPrmtDataList& */	public void setPartialPrmtDataList(Vector avPartialPrmtDataList)	{		cvPartialPrmtDataList = avPartialPrmtDataList;	}	/**	 * Set value of cvPriorModTransList	 * 	 * @param avPriorModTransList	 *//* &PermitData.setPriorModTransList& */	public void setPriorModTransList(Vector avPriorModTransList)	{		cvPriorModTransList = avPriorModTransList;	}	/**	 * Sets value of cbPrmDupTrans	 * 	 * @param abPrmDupTrans	 *//* &PermitData.setPrmDupTrans& */	public void setPrmDupTrans(boolean abPrmDupTrans)	{		cbPrmDupTrans = abPrmDupTrans;	}	/**	 * Sets value of csPrmtIssuanceId	 * 	 * @param asPrmtIssuanceId	 *//* &PermitData.setPrmtIssuanceId& */	public void setPrmtIssuanceId(String asPrmtIssuanceId)	{		csPrmtIssuanceId = asPrmtIssuanceId;	}	/**	 * Sets value of csPrmtNo	 * 	 * @param asPrmtNo	 *//* &PermitData.setPrmtNo& */	public void setPrmtNo(String asPrmtNo)	{		csPrmtNo = asPrmtNo;	}	/**	 * Sets value of caPrmtPdAmt	 * 	 * @param aaPrmtPdAmt	 *//* &PermitData.setPrmtPdAmt& */	public void setPrmtPdAmt(Dollar aaPrmtPdAmt)	{		caPrmtPdAmt = aaPrmtPdAmt;	}	/**	 * Sets value of csTransCd	 * 	 * @param asTransCd	 *//* &PermitData.setTransCd& */	public void setTransCd(String asTransCd)	{		csTransCd = asTransCd;	}	/**	 * Sets value of csTransEmpId 	 * 	 * @param asTransEmpId	 *//* &PermitData.setTransEmpId& */	public void setTransEmpId(String asTransEmpId)	{		csTransEmpId = asTransEmpId;	}	/**	 * Sets value of csVehBdyType	 * 	 * @param asVehBdyType	 *//* &PermitData.setVehBdyType& */	public void setVehBdyType(String asVehBdyType)	{		csVehBdyType = asVehBdyType;	}	/**	 * Sets value of csVehMk	 * 	 * @param asVehMk	 *//* &PermitData.setVehMk& */	public void setVehMk(String asVehMk)	{		csVehMk = asVehMk;	}	/**	 * Set value of csVehMkDesc	 * 	 * @param asVehMkDesc	 *//* &PermitData.setVehMkDesc& */	public void setVehMkDesc(String asVehMkDesc)	{		csVehMkDesc = asVehMkDesc;	}	/**	 * Sets value of ciVehModlYr	 * 	 * @param aiVehModlYr	 *//* &PermitData.setVehModlYr& */	public void setVehModlYr(int aiVehModlYr)	{		ciVehModlYr = aiVehModlYr;	}	/**	 * Sets value of csVehRegCntry	 * 	 * @param asVehRegCntry	 *//* &PermitData.setVehRegCntry& */	public void setVehRegCntry(String asVehRegCntry)	{		csVehRegCntry = asVehRegCntry;	}	/**	 * Sets value of csVehRegPltNo	 * 	 * @param asVehRegPltNo	 *//* &PermitData.setVehRegPltNo& */	public void setVehRegPltNo(String asVehRegPltNo)	{		csVehRegPltNo = asVehRegPltNo;	}	/**	 * Sets value of csVehTypeCd	 * 	 * @param csVehTypeCd	 *//* &PermitData.setVehTypeCd& */	public void setVehTypeCd()	{		csVehTypeCd =			hasIssuedMotorCyclePermit()				? MiscellaneousRegConstant.PERMIT_MOTORCYCLE_VEHTYPECD				: MiscellaneousRegConstant.PERMIT_REGULAR_VEHTYPECD;	}	/**	 * Sets value of csVehTypeCd	 * 	 * @param csVehTypeCd	 *//* &PermitData.setVehTypeCd$1& */	public void setVehTypeCd(String asVehTypeCd)	{		csVehTypeCd = asVehTypeCd;	}	/**	 * Sets value of caVIAllocData	 * 	 * @param aaVIAllocData	 *//* &PermitData.setVIAllocData& */	public void setVIAllocData(InventoryAllocationData aaVIAllocData)	{		caVIAllocData = aaVIAllocData;	}	/**	 * Sets value of csVin	 * 	 * @param asVin	 *//* &PermitData.setVin& */	public void setVin(String asVin)	{		csVin = asVin;	}}/* #PermitData# */