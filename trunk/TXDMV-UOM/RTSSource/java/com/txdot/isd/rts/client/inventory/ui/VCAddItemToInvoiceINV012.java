package com.txdot.isd.rts.client.inventory.ui;import java.util.Vector;import com.txdot.isd.rts.client.general.ui.AbstractViewController;import com.txdot.isd.rts.client.general.ui.RTSDialogBox;import com.txdot.isd.rts.services.data.MFInventoryAllocationData;import com.txdot.isd.rts.services.exception.RTSException;import com.txdot.isd.rts.services.util.constants.GeneralConstant;import com.txdot.isd.rts.services.util.constants.InventoryConstant;/* * * VCAddItemToInvoiceINV012.java * * (c) Texas Department of Transportation 2001 * --------------------------------------------------------------------- * Change History: * Name			Date		Description * ------------	-----------	-------------------------------------------- * Ray Rowehl	02/19/2005	RTS 5.2.3 Code clean up *							defect 7890 Ver 5.2.3 * Ray Rowehl	06/17/2005	More code cleanup * 							defect 7890 Ver 5.2.3 * Ray Rowehl	08/17/2005	Add white space between methods. * 							defect 7890 Ver 5.2.3 * --------------------------------------------------------------------- *//** * The View Controller for the INV012 screen.  It handles screen  * navigation and controls the visibility of it's frame. *  * @version	5.2.3		08/17/2005 * @author	Charlie Walker * <br>Creation Date:	08/28/2001 18:19:45 *//* &VCAddItemToInvoiceINV012& */public class VCAddItemToInvoiceINV012 extends AbstractViewController{	/**	 * Constant to define a command for the screen to communicate with	 * the VC	 *//* &VCAddItemToInvoiceINV012'YES& */	public static final int YES = 14;		/**	 * VCAddItemToInvoiceINV012 constructor comment.	 *//* &VCAddItemToInvoiceINV012.VCAddItemToInvoiceINV012& */	public VCAddItemToInvoiceINV012()	{		super();	}		/**	 * All subclasses must override this method to return their own	 * module name.	 *	 * @return int	 *//* &VCAddItemToInvoiceINV012.getModuleName& */	public int getModuleName()	{		return GeneralConstant.INVENTORY;	}		/**	 * All subclasses must override this method to handle data coming 	 * from their JDialogBox - inside the subclasses implementation	 * should be calls to fireRTSEvent() to pass the data to the 	 * RTSMediator.	 *	 * @param aiCommand int 	 * @param aaData Object 	 *//* &VCAddItemToInvoiceINV012.processData& */	public void processData(int aiCommand, Object aaData)	{		switch (aiCommand)		{			case AbstractViewController.ENTER :			{				setData(aaData);				setDirectionFlow(AbstractViewController.CURRENT);				try				{					getMediator().processData(						getModuleName(),						InventoryConstant							.ADD_MODIFY_DELETE_INVENTORY_ITEM,						aaData);				}				catch (RTSException leRTSEx)				{					((FrmAddItemToInvoiceINV012) getFrame()).cbExThrown =						true;					// Pass all exceptions to the frame for handling.					// This allows for components to be turned red and					// gain focus.					(						(FrmAddItemToInvoiceINV012) getFrame())							.procsExcptn(						leRTSEx);				}				break;			}			case AbstractViewController.CANCEL :			{				setData(aaData);				setDirectionFlow(AbstractViewController.CANCEL);				try				{					getMediator().processData(						getModuleName(),						InventoryConstant.NO_DATA_TO_BUSINESS,						aaData);				}				catch (RTSException aeRTSEx)				{					aeRTSEx.displayError(getFrame());				}				getFrame().setVisibleRTS(false);				break;			}			case VCAddItemToInvoiceINV012.YES :			{				setData(aaData);				setDirectionFlow(AbstractViewController.PREVIOUS);				boolean lbVisible = false;				try				{					getMediator().processData(						getModuleName(),						InventoryConstant							.ADD_MODIFY_DELETE_INVENTORY_ITEM,						aaData);				}				catch (RTSException aeRTSEx)				{					// Delete the invalid line item from the invoice					MFInventoryAllocationData laMFInvAlloctnDataFinal =						(MFInventoryAllocationData)							((Vector) aaData).get(							1);					Vector lvInvcItms =						laMFInvAlloctnDataFinal.getInvAlloctnData();					int liLastIndx = lvInvcItms.size() - 1;					lvInvcItms.removeElementAt(liLastIndx);					laMFInvAlloctnDataFinal.setInvAlloctnData(						lvInvcItms);					aeRTSEx.displayError(getFrame());					lbVisible = true;				}				if (!lbVisible)				{					getFrame().setVisibleRTS(false);				}				break;			}		}	}		/**	 * All subclasses must override this method to handle data coming 	 * from their JDialogBox - inside the subclasses implementation	 * should be calls to fireRTSEvent() to pass the data to the 	 * RTSMediator.	 *	 * @param avPreviousControllers - Vector	 * @param asTransCode - String	 * @param aaData - Object - the data	 *//* &VCAddItemToInvoiceINV012.setView& */	public void setView(		Vector avPreviousControllers,		String asTransCode,		Object aaData)	{		if (getFrame() == null)		{			RTSDialogBox laRTSDB = getMediator().getParent();			if (laRTSDB != null)			{				setFrame(new FrmAddItemToInvoiceINV012(laRTSDB));			}			else			{				setFrame(new FrmAddItemToInvoiceINV012(						getMediator().getDesktop()));			}		}		super.setView(avPreviousControllers, asTransCode, aaData);	}}/* #VCAddItemToInvoiceINV012# */