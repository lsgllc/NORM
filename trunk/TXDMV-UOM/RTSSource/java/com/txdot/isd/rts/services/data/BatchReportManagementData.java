package com.txdot.isd.rts.services.data;import java.io.Serializable;import com.txdot.isd.rts.services.util.RTSDate;/* * BatchReportManagementData.java * * (c) Texas Department of Transportation 2011 * --------------------------------------------------------------------- * Change History: * Name			Date		Description * ------------	-----------	-------------------------------------------- * K Harrell	01/14/2011	Created * 							defect 10701 Ver 6.7.0 * --------------------------------------------------------------------- *//** * Data class for RTS.RTS_BATCH_RPT_MGMT * * @version	6.7.0 			01/14/2011 * @author	Kathy Harrell * <br>Creation Date:		01/14/2011 16:16:17 *//* &BatchReportManagementData& */public class BatchReportManagementData	implements Serializable, Comparable{/* &BatchReportManagementData'ciAutoPrntIndi& */	private int ciAutoPrntIndi;/* &BatchReportManagementData'ciDeleteIndi& */	private int ciDeleteIndi;/* &BatchReportManagementData'ciOfcIssuanceNo& */	private int ciOfcIssuanceNo;/* &BatchReportManagementData'ciRptNumber& */	private int ciRptNumber;/* &BatchReportManagementData'ciSubstaId& */	private int ciSubstaId;/* &BatchReportManagementData'csFileName& */	private String csFileName;/* &BatchReportManagementData'csRptDesc& */	private String csRptDesc;/* &BatchReportManagementData'caChngTimestmp& */	private RTSDate caChngTimestmp;/* &BatchReportManagementData'serialVersionUID& */	static final long serialVersionUID = -8837859879234462665L;	/**	 * BatchReportManagementData.java Constructor	 *//* &BatchReportManagementData.BatchReportManagementData& */	public BatchReportManagementData()	{		super();	}	/**	 * Compares this object with the specified object for order.  Returns a	 * negative integer, zero, or a positive integer as this object is less	 * than, equal to, or greater than the specified object.<p>	 *	 * The implementor must ensure <tt>sgn(x.compareTo(y)) ==	 * -sgn(y.compareTo(x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This	 * implies that <tt>x.compareTo(y)</tt> must throw an exception iff	 * <tt>y.compareTo(x)</tt> throws an exception.)<p>	 *	 * The implementor must also ensure that the relation is transitive:	 * <tt>(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)</tt> implies	 * <tt>x.compareTo(z)&gt;0</tt>.<p>	 *	 * Finally, the implementer must ensure that <tt>x.compareTo(y)==0</tt>	 * implies that <tt>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</tt>, for	 * all <tt>z</tt>.<p>	 *	 * It is strongly recommended, but <i>not</i> strictly required that	 * <tt>(x.compareTo(y)==0) == (x.equals(y))</tt>.  Generally speaking, any	 * class that implements the <tt>Comparable</tt> interface and violates	 * this condition should clearly indicate this fact.  The recommended	 * language is "Note: this class has a natural ordering that is	 * inconsistent with equals."	 * 	 * @param   aaObject Object	 * @return  int	 *//* &BatchReportManagementData.compareTo& */	public int compareTo(Object aaObject)	{		return getRptDesc()			.compareTo(((BatchReportManagementData) aaObject)			.getRptDesc());	}	/**	 * Get value of ciAutoPrntIndi	 * 	 * @return int	 *//* &BatchReportManagementData.getAutoPrntIndi& */	public int getAutoPrntIndi()	{		return ciAutoPrntIndi;	}	/**	 * Get value of caChngTimestmp	 * 	 * @return RTSDate	 *//* &BatchReportManagementData.getChngTimestmp& */	public RTSDate getChngTimestmp()	{		return caChngTimestmp;	}	/**	 * Get value of ciDeleteIndi	 * 	 * @return int	 *//* &BatchReportManagementData.getDeleteIndi& */	public int getDeleteIndi()	{		return ciDeleteIndi;	}	/**	 * Get value of csFileName	 * 	 * @return String 	 *//* &BatchReportManagementData.getFileName& */	public String getFileName()	{		return csFileName;	}	/**	 * Get value of ciOfcIssuanceNo	 * 	 * @return int	 *//* &BatchReportManagementData.getOfcIssuanceNo& */	public int getOfcIssuanceNo()	{		return ciOfcIssuanceNo;	}	/**	 * Get value of csRptDesc	 * 	 * @return String 	 *//* &BatchReportManagementData.getRptDesc& */	public String getRptDesc()	{		return csRptDesc;	}	/**	 * Get value of ciRptNumber	 * 	 * @return int	 *//* &BatchReportManagementData.getRptNumber& */	public int getRptNumber()	{		return ciRptNumber;	}	/**	 * Get value of ciSubstaId	 * 	 * @return int	 *//* &BatchReportManagementData.getSubstaId& */	public int getSubstaId()	{		return ciSubstaId;	}	/**	 * Set value of ciAutoPrntIndi	 * 	 * @return boolean 	 *//* &BatchReportManagementData.isAutoPrnt& */	public boolean isAutoPrnt()	{		return ciAutoPrntIndi == 1;	}	/**	 * Set value of ciAutoPrntIndi	 * 	 * @param aiAutoPrntIndi	 *//* &BatchReportManagementData.setAutoPrntIndi& */	public void setAutoPrntIndi(int aiAutoPrntIndi)	{		ciAutoPrntIndi = aiAutoPrntIndi;	}	/**	 * Set value of caChngTimestmp	 * 	 * @param aaChngTimestmp	 *//* &BatchReportManagementData.setChngTimestmp& */	public void setChngTimestmp(RTSDate aaChngTimestmp)	{		caChngTimestmp = aaChngTimestmp;	}	/**	 * Set value of ciDeleteIndi	 * 	 * @param aiDeleteIndi	 *//* &BatchReportManagementData.setDeleteIndi& */	public void setDeleteIndi(int aiDeleteIndi)	{		ciDeleteIndi = aiDeleteIndi;	}	/**	 * Return value of csFileName	 * 	 * @param asFileName	 *//* &BatchReportManagementData.setFileName& */	public void setFileName(String asFileName)	{		csFileName = asFileName;	}	/**	 * Set value of ciOfcIssuanceNo	 * 	 * @param aiOfcIssuanceNo	 *//* &BatchReportManagementData.setOfcIssuanceNo& */	public void setOfcIssuanceNo(int aiOfcIssuanceNo)	{		ciOfcIssuanceNo = aiOfcIssuanceNo;	}	/**	 * Set value of csRptDesc	 * 	 * @param asRptDesc	 *//* &BatchReportManagementData.setRptDesc& */	public void setRptDesc(String asRptDesc)	{		csRptDesc = asRptDesc;	}	/**	 * Set value of ciRptNumber	 * 	 * @param aiRptNumber	 *//* &BatchReportManagementData.setRptNumber& */	public void setRptNumber(int aiRptNumber)	{		ciRptNumber = aiRptNumber;	}	/**	 * Set value of ciSubstaId	 * 	 * @param aiSubstaId	 *//* &BatchReportManagementData.setSubstaId& */	public void setSubstaId(int aiSubstaId)	{		ciSubstaId = aiSubstaId;	}}/* #BatchReportManagementData# */