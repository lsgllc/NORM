package com.txdot.isd.rts.services.data;import java.lang.reflect.Field;import java.util.*;import com.txdot.isd.rts.services.exception.RTSException;import com.txdot.isd.rts.services.util.Displayable;import com.txdot.isd.rts.services.util.Dollar;/* * * SubcontractorRenewalCacheData.java * * (c) Texas Department of Transportation 2001 * * --------------------------------------------------------------------- * Change History: * Name			Date		Description * ------------	-----------	-------------------------------------------- * N Ting		05/06/2002	Added clientTranstime so that transtime can  * 							be generated on the client side always * 							defect 3773  * MAbs			05/08/2002	so class be viewed in ShowCache * 							defect 3776  * K Harrell	03/21/2004	5.2.0 Merge.  Complete replacement  * 							Ver 5.2.0 * K Harrell	10/10/2004	Subcon Cleanup Work *							deprecated addIssuedInventory(), *							getClientTranstime(), *							getHeldInvStkr(), *							getINV014CurrentInvType(), *							getLeaveListBtnDisplay(), *							getSubconIssuedInv(), *							isListBox(),isMoreTrans(), *							removeIssuedInventory() *							setClientTranstime(), *							setHeldInvStkr(), *							setINV014CurrentInvType(), *							setLeaveListBtnDisplay(), *							setListBox(), *							setMoreTrans() *							setSubconIssuedInv(), *							defect 7609 Ver 5.2.1 * K Harrell	04/21/2005	Java 1.4 Work * 							deleted above deprecated methods * 							defect 7899 Ver 5.2.3 * K Harrell	05/02/2005	INV014 renamed to INV003  * 							rename associated variables, methods.  * 							defect 6966 Ver 5.2.3   * K Harrell	06/19/2005	Java 1.4 Work * 							defect 7899 Ver 5.2.3  * --------------------------------------------------------------------- *//** * This data object stores pending subcontractor renewal  * transactions for later retrieval.  This object will be  * used for writing and reading to/from a local disk file.   * It is also used for displaying the list of transactions  * being processed. *  *  * @version	5.2.3			06/19/2005  * @author	Nancy Ting  * <br>Creation Date:		10/18/2001 *//* &SubcontractorRenewalCacheData& */public class SubcontractorRenewalCacheData	implements java.io.Serializable, Displayable{	// boolean/* &SubcontractorRenewalCacheData'cbAllTransPosted& */	private boolean cbAllTransPosted;/* &SubcontractorRenewalCacheData'cbINV003Voided& */	private boolean cbINV003Voided;/* &SubcontractorRenewalCacheData'cbCompleteOneTrans& */	private boolean cbCompleteOneTrans;/* &SubcontractorRenewalCacheData'cbControlVisible& */	private boolean cbControlVisible;/* &SubcontractorRenewalCacheData'cbModified& */	private boolean cbModified;/* &SubcontractorRenewalCacheData'cbPrintPrelimReport& */	private boolean cbPrintPrelimReport;/* &SubcontractorRenewalCacheData'cbUseBarCode& */	private boolean cbUseBarCode;	// int/* &SubcontractorRenewalCacheData'ciBarCodeIndi& */	private int ciBarCodeIndi;/* &SubcontractorRenewalCacheData'ciExceptionField& */	private int ciExceptionField;/* &SubcontractorRenewalCacheData'ciNextVC& */	private int ciNextVC; // VC Switch/* &SubcontractorRenewalCacheData'ciTransAMDate& */	private int ciTransAMDate; // SendCache/* &SubcontractorRenewalCacheData'ciTransTime& */	private int ciTransTime; // SendCache	// Object/* &SubcontractorRenewalCacheData'caRunningTotal& */	private Dollar caRunningTotal = new Dollar("0.00");/* &SubcontractorRenewalCacheData'chsInventoryCheckList& */	private HashSet chsInventoryCheckList = new HashSet();/* &SubcontractorRenewalCacheData'chsInvValIndex& */	private HashSet chsInvValIndex = new HashSet();/* &SubcontractorRenewalCacheData'chsUnProcsList& */	private HashSet chsUnProcsList = new HashSet();/* &SubcontractorRenewalCacheData'chtDiskHeldPltList& */	private Hashtable chtDiskHeldPltList = new Hashtable();/* &SubcontractorRenewalCacheData'chtIssuedInventories& */	private Hashtable chtIssuedInventories = new Hashtable();/* &SubcontractorRenewalCacheData'chtPrintedInventories& */	private Hashtable chtPrintedInventories = new Hashtable();/* &SubcontractorRenewalCacheData'chtReprintStickerReportDataList& */	private Hashtable chtReprintStickerReportDataList;/* &SubcontractorRenewalCacheData'chtTransCurrPltNo& */	private Hashtable chtTransCurrPltNo = new Hashtable();/* &SubcontractorRenewalCacheData'chtTransDocNo& */	private Hashtable chtTransDocNo = new Hashtable();/* &SubcontractorRenewalCacheData'chtTransNewPltNo& */	private Hashtable chtTransNewPltNo = new Hashtable();/* &SubcontractorRenewalCacheData'chtTransVIN& */	private Hashtable chtTransVIN = new Hashtable();/* &SubcontractorRenewalCacheData'caCurrTransIndex& */	private Integer caCurrTransIndex = new Integer(0);/* &SubcontractorRenewalCacheData'caRecordModifyIndex& */	private Integer caRecordModifyIndex;/* &SubcontractorRenewalCacheData'caHeldInvPlt& */	private ProcessInventoryData caHeldInvPlt;/* &SubcontractorRenewalCacheData'caINV003ProcessInventoryData& */	private ProcessInventoryData caINV003ProcessInventoryData;/* &SubcontractorRenewalCacheData'caTempRenewalBarCodeData& */	private RenewalBarCodeData caTempRenewalBarCodeData;/* &SubcontractorRenewalCacheData'ceException& */	private RTSException ceException;/* &SubcontractorRenewalCacheData'caDeleteIndex& */	private Set caDeleteIndex;/* &SubcontractorRenewalCacheData'caErrorIndices& */	private Set caErrorIndices;/* &SubcontractorRenewalCacheData'csmSubconTransData& */	private SortedMap csmSubconTransData =		new TreeMap(new SubcontractorSorting());/* &SubcontractorRenewalCacheData'caSubconInfo& */	private SubcontractorData caSubconInfo;/* &SubcontractorRenewalCacheData'caSubcontractorHdrData& */	private SubcontractorHdrData caSubcontractorHdrData;/* &SubcontractorRenewalCacheData'caRecordModified& */	private SubcontractorRenewalData caRecordModified;/* &SubcontractorRenewalCacheData'caRecordTobeModified& */	private SubcontractorRenewalData caRecordTobeModified;/* &SubcontractorRenewalCacheData'caTempSubconRenewalData& */	private SubcontractorRenewalData caTempSubconRenewalData;/* &SubcontractorRenewalCacheData'caTransactionHeaderData& */	private TransactionHeaderData caTransactionHeaderData;	// String /* &SubcontractorRenewalCacheData'csDisplaySubconInfo& */	private String csDisplaySubconInfo; // Used on REG007 /* &SubcontractorRenewalCacheData'csINV003AllocatedName& */	private String csINV003AllocatedName;/* &SubcontractorRenewalCacheData'csInvalidRecordsMsg& */	private String csInvalidRecordsMsg;/* &SubcontractorRenewalCacheData'csRcptDir& */	private String csRcptDir;	// Vector/* &SubcontractorRenewalCacheData'cvDeleteTransKeyList& */	private Vector cvDeleteTransKeyList; //stores the transkey/* &SubcontractorRenewalCacheData'cvReleaseInventoryList& */	private Vector cvReleaseInventoryList;/* &SubcontractorRenewalCacheData'cvSubconAllocatedInventory& */	private Vector cvSubconAllocatedInventory; // for REG006/* &SubcontractorRenewalCacheData'cvSubconDiskData& */	private Vector cvSubconDiskData; // vector of subcon data from disk	// Constants /* &SubcontractorRenewalCacheData'STKR& */	public static final int STKR = 0;/* &SubcontractorRenewalCacheData'PLT& */	public static final int PLT = 1;/* &SubcontractorRenewalCacheData'PLT_STKR& */	public static final int PLT_STKR = 2;/* &SubcontractorRenewalCacheData'FD_EXP_YR& */	public static final int FD_EXP_YR = 1;/* &SubcontractorRenewalCacheData'FD_ISSUE_DT& */	public static final int FD_ISSUE_DT = 2;/* &SubcontractorRenewalCacheData'FD_NEW_PLT_NO& */	public static final int FD_NEW_PLT_NO = 3;/* &SubcontractorRenewalCacheData'FD_DOC_NO& */	public static final int FD_DOC_NO = 4;/* &SubcontractorRenewalCacheData'FD_VIN& */	public static final int FD_VIN = 5;/* &SubcontractorRenewalCacheData'FD_CURR_PLT_NO& */	public static final int FD_CURR_PLT_NO = 6;/* &SubcontractorRenewalCacheData'FD_EXP_MO& */	public static final int FD_EXP_MO = 7;/* &SubcontractorRenewalCacheData'FD_REG_CLASS& */	public static final int FD_REG_CLASS = 8;/* &SubcontractorRenewalCacheData'FD_FEE& */	public static final int FD_FEE = 9;/* &SubcontractorRenewalCacheData'serialVersionUID& */	private final static long serialVersionUID = 3042166784314684875L;	/**	 * SubcontractorRenewalCacheData constructor comment.	 *//* &SubcontractorRenewalCacheData.SubcontractorRenewalCacheData& */	public SubcontractorRenewalCacheData()	{		super();	}	/**	 * Returns a Map of the internal attributes.  	 * Implementers of this method should use introspection 	 * to display their internal variables and values	 * 	 * @return Map	 *//* &SubcontractorRenewalCacheData.getAttributes& */	public Map getAttributes()	{		HashMap lhmHashMap = new HashMap();		Field[] larrFields = this.getClass().getDeclaredFields();		for (int i = 0; i < larrFields.length; i++)		{			try			{				lhmHashMap.put(					larrFields[i].getName(),					larrFields[i].get(this));			}			catch (IllegalAccessException leIllAccEx)			{				continue;			}		}		return lhmHashMap;	}	/**	 * Return value of BarCodeIndi	 * 	 * @return int	 *//* &SubcontractorRenewalCacheData.getBarCodeIndi& */	public int getBarCodeIndi()	{		return ciBarCodeIndi;	}	/**	 * Return value of CurrTransIndex	 * 	 * @return Integer	 *//* &SubcontractorRenewalCacheData.getCurrTransIndex& */	public Integer getCurrTransIndex()	{		return caCurrTransIndex;	}	/**	 * Return value of DeleteIndex	 * 	 * @return Set 	 *//* &SubcontractorRenewalCacheData.getDeleteIndex& */	public Set getDeleteIndex()	{		return caDeleteIndex;	}	/**	 * Return value of DeleteTransKeyList	 * 	 * @return Vector	 *//* &SubcontractorRenewalCacheData.getDeleteTransKeyList& */	public Vector getDeleteTransKeyList()	{		return cvDeleteTransKeyList;	}	/**	 * Return value of DiskHeldPltList	 * 	 * @return Hashtable	 *//* &SubcontractorRenewalCacheData.getDiskHeldPltList& */	public Hashtable getDiskHeldPltList()	{		return chtDiskHeldPltList;	}	/**	 * Return value of DisplaySubconInfo	 * 	 * @return String	 *//* &SubcontractorRenewalCacheData.getDisplaySubconInfo& */	public String getDisplaySubconInfo()	{		return csDisplaySubconInfo;	}	/**	 * Return value of ErrorIndices	 * 	 * @return Set	 *//* &SubcontractorRenewalCacheData.getErrorIndices& */	public Set getErrorIndices()	{		return caErrorIndices;	}	/**	 * Return value of Exception	 * 	 * @return RTSException	 *//* &SubcontractorRenewalCacheData.getException& */	public RTSException getException()	{		return ceException;	}	/**	 * Return value of ExceptionField	 * 	 * @return int	 *//* &SubcontractorRenewalCacheData.getExceptionField& */	public int getExceptionField()	{		return ciExceptionField;	}	/**	 * Return value of HeldInvPlt	 * 	 * @return ProcessInventoryData	 *//* &SubcontractorRenewalCacheData.getHeldInvPlt& */	public ProcessInventoryData getHeldInvPlt()	{		return caHeldInvPlt;	}	/**	 * Return value of INV003AllocatedName	 * 	 * @return String	 *//* &SubcontractorRenewalCacheData.getINV003AllocatedName& */	public String getINV003AllocatedName()	{		return csINV003AllocatedName;	}	/**	 * Return value of ProcessInventoryData	 * 	 * @return ProcessInventoryData	 *//* &SubcontractorRenewalCacheData.getINV003ProcessInventoryData& */	public ProcessInventoryData getINV003ProcessInventoryData()	{		return caINV003ProcessInventoryData;	}	/**	 * Return value of InvalidRecordsMsg	 * 	 * @return String	 *//* &SubcontractorRenewalCacheData.getInvalidRecordsMsg& */	public String getInvalidRecordsMsg()	{		return csInvalidRecordsMsg;	}	/**	 * Return value of InventoryCheckList	 * 	 * @return HashSet	 *//* &SubcontractorRenewalCacheData.getInventoryCheckList& */	public HashSet getInventoryCheckList()	{		return chsInventoryCheckList;	}	/**	 * Return value of InvValIndex	 * 	 * @return HashSet	 *//* &SubcontractorRenewalCacheData.getInvValIndex& */	public HashSet getInvValIndex()	{		return chsInvValIndex;	}	/**	 * Return value of IssuedInventories	 * 	 * @return HashSet	 *//* &SubcontractorRenewalCacheData.getIssuedInventories& */	public Hashtable getIssuedInventories()	{		return chtIssuedInventories;	}	/**	 * Return value of NextVC	 * 	 * @return int	 *//* &SubcontractorRenewalCacheData.getNextVC& */	public int getNextVC()	{		return ciNextVC;	}	/**	 * Return value of PrintedInventories	 * 	 * @return HashSet	 *//* &SubcontractorRenewalCacheData.getPrintedInventories& */	public Hashtable getPrintedInventories()	{		return chtPrintedInventories;	}	/**	 * Return value of RcptDir	 * 	 * @return String	 *//* &SubcontractorRenewalCacheData.getRcptDir& */	public String getRcptDir()	{		return csRcptDir;	}	/**	 * Return value of RecordModified	 * 	 * @return SubcontractorRenewalData	 *//* &SubcontractorRenewalCacheData.getRecordModified& */	public SubcontractorRenewalData getRecordModified()	{		return caRecordModified;	}	/**	 * Return value of RecordModifyIndex	 * 	 * @return Integer	 *//* &SubcontractorRenewalCacheData.getRecordModifyIndex& */	public Integer getRecordModifyIndex()	{		return caRecordModifyIndex;	}	/**	 * Return value of RecordTobeModified	 * 	 * @return SubcontractorRenewalData	 *//* &SubcontractorRenewalCacheData.getRecordTobeModified& */	public SubcontractorRenewalData getRecordTobeModified()	{		return caRecordTobeModified;	}	/**	 * Return value of ReleaseInventoryList	 * 	 * @return Vector	 *//* &SubcontractorRenewalCacheData.getReleaseInventoryList& */	public Vector getReleaseInventoryList()	{		return cvReleaseInventoryList;	}	/**	 * Return value of ReprintStickerReportDataList	 * 	 * @return Hashtable	 *//* &SubcontractorRenewalCacheData.getReprintStickerReportDataList& */	public Hashtable getReprintStickerReportDataList()	{		return chtReprintStickerReportDataList;	}	/**	 * Return value of RunningTotal	 * 	 * @return Dollar	 *//* &SubcontractorRenewalCacheData.getRunningTotal& */	public Dollar getRunningTotal()	{		return caRunningTotal;	}	/**	 * Return value of SubconAllocatedInventory	 * 	 * @return Vector	 *//* &SubcontractorRenewalCacheData.getSubconAllocatedInventory& */	public Vector getSubconAllocatedInventory()	{		return cvSubconAllocatedInventory;	}	/**	 * Return value of SubconDiskData	 * 	 * @return Vector	 *//* &SubcontractorRenewalCacheData.getSubconDiskData& */	public Vector getSubconDiskData()	{		return cvSubconDiskData;	}	/**	 * Return value of SubconInfo	 * 	 * @return SubcontractorData	 *//* &SubcontractorRenewalCacheData.getSubconInfo& */	public SubcontractorData getSubconInfo()	{		return caSubconInfo;	}	/**	 * Return value of SubcontractorHdrData	 * 	 * @return SubcontractorHdrData	 *//* &SubcontractorRenewalCacheData.getSubcontractorHdrData& */	public SubcontractorHdrData getSubcontractorHdrData()	{		return caSubcontractorHdrData;	}	/**	 * Return value of mSubconTransData	 * 	 * @return SortedMap	 *//* &SubcontractorRenewalCacheData.getSubconTransData& */	public SortedMap getSubconTransData()	{		return csmSubconTransData;	}	/**	 * Return value of TempRenewalBarCodeData	 * 	 * @return RenewalBarCodeData	 *//* &SubcontractorRenewalCacheData.getTempRenewalBarCodeData& */	public RenewalBarCodeData getTempRenewalBarCodeData()	{		return caTempRenewalBarCodeData;	}	/**	 * Return value of TempSubconRenewalData	 * 	 * @return SubcontractorRenewalData	 *//* &SubcontractorRenewalCacheData.getTempSubconRenewalData& */	public SubcontractorRenewalData getTempSubconRenewalData()	{		return caTempSubconRenewalData;	}	/**	 * Return value of TransactionHeaderData	 * 	 * @return TransactionHeaderData	 *//* &SubcontractorRenewalCacheData.getTransactionHeaderData& */	public TransactionHeaderData getTransactionHeaderData()	{		return caTransactionHeaderData;	}	/**	 * Return value of TransAMDate	 * 	 * @return int	 *//* &SubcontractorRenewalCacheData.getTransAMDate& */	public int getTransAMDate()	{		return ciTransAMDate;	}	/**	 * Return value of TransCurrPltNo	 * 	 * @return HashSet	 *//* &SubcontractorRenewalCacheData.getTransCurrPltNo& */	public Hashtable getTransCurrPltNo()	{		return chtTransCurrPltNo;	}	/**	 * Return value of TransDocNo	 * 	 * @return HashSet	 *//* &SubcontractorRenewalCacheData.getTransDocNo& */	public Hashtable getTransDocNo()	{		return chtTransDocNo;	}	/**	 * Return value of TransNewPltNo	 * 	 * @return HashSet	 *//* &SubcontractorRenewalCacheData.getTransNewPltNo& */	public Hashtable getTransNewPltNo()	{		return chtTransNewPltNo;	}	/**	 * Return value of TransTime	 * 	 * @return int	 *//* &SubcontractorRenewalCacheData.getTransTime& */	public int getTransTime()	{		return ciTransTime;	}	/**	 * Return value of TransVIN	 * 	 * @return HashSet	 *//* &SubcontractorRenewalCacheData.getTransVIN& */	public Hashtable getTransVIN()	{		return chtTransVIN;	}	/**	 * Return value of UnProcsList	 * 	 * @return HashSet	 *//* &SubcontractorRenewalCacheData.getUnProcsList& */	public HashSet getUnProcsList()	{		return chsUnProcsList;	}	/**	 * Return value of 	 * 	 *//* &SubcontractorRenewalCacheData.incrementTransIndex& */	public void incrementTransIndex()	{		caCurrTransIndex = new Integer(caCurrTransIndex.intValue() + 1);	}	/**	 * Return value of AllTransPosted	 * 	 * @return boolean	 *//* &SubcontractorRenewalCacheData.isAllTransPosted& */	public boolean isAllTransPosted()	{		return cbAllTransPosted;	}	/**	 * Return value of CompleteOneTrans	 * 	 * @return boolean	 *//* &SubcontractorRenewalCacheData.isCompleteOneTrans& */	public boolean isCompleteOneTrans()	{		return cbCompleteOneTrans;	}	/**	 * Return value of ControlVisible	 * 	 * @return boolean	 *//* &SubcontractorRenewalCacheData.isControlVisible& */	public boolean isControlVisible()	{		return cbControlVisible;	}	/**	 * Return value of INV003Voided	 * 	 * @return boolean	 *//* &SubcontractorRenewalCacheData.isINV003Voided& */	public boolean isINV003Voided()	{		return cbINV003Voided;	}	/**	 * Return value of Modified	 * 	 * @return boolean	 *//* &SubcontractorRenewalCacheData.isModified& */	public boolean isModified()	{		return cbModified;	}	/**	 * Return value of PrintPrelimReport	 * 	 * @return boolean	 *//* &SubcontractorRenewalCacheData.isPrintPrelimReport& */	public boolean isPrintPrelimReport()	{		return cbPrintPrelimReport;	}	/**	 * Return value of UseBarCode	 * 	 * @return boolean	 *//* &SubcontractorRenewalCacheData.isUseBarCode& */	public boolean isUseBarCode()	{		return cbUseBarCode;	}	/**	 * Reset VC 	 * 	 *//* &SubcontractorRenewalCacheData.resetVC& */	public void resetVC()	{		ciNextVC = 0;	}	/**	 * Set value of AllTransPosted	 * 	 * @param abAllTransPosted boolean	 *//* &SubcontractorRenewalCacheData.setAllTransPosted& */	public void setAllTransPosted(boolean abAllTransPosted)	{		cbAllTransPosted = abAllTransPosted;	}	/**	 * Set value of BarCodeIndi	 * 	 * @param aiBarCodeIndi int	 *//* &SubcontractorRenewalCacheData.setBarCodeIndi& */	public void setBarCodeIndi(int aiBarCodeIndi)	{		ciBarCodeIndi = aiBarCodeIndi;	}	/**	 * Set value of CompleteOneTrans	 * 	 * @param abCompleteOneTrans boolean	 *//* &SubcontractorRenewalCacheData.setCompleteOneTrans& */	public void setCompleteOneTrans(boolean abCompleteOneTrans)	{		cbCompleteOneTrans = abCompleteOneTrans;	}	/**	 * Set value of ControlVisible	 * 	 * @param aControlVisible boolean	 *//* &SubcontractorRenewalCacheData.setControlVisible& */	public void setControlVisible(boolean abControlVisible)	{		cbControlVisible = abControlVisible;	}	/**	 * Set value of CurrTransIndex	 * 	 * @param aaCurrTransIndex Integer	 *//* &SubcontractorRenewalCacheData.setCurrTransIndex& */	public void setCurrTransIndex(Integer aaCurrTransIndex)	{		caCurrTransIndex = aaCurrTransIndex;	}	/**	 * Set value of DeleteIndex	 * 	 * @param aaDeleteIndex int[]	 *//* &SubcontractorRenewalCacheData.setDeleteIndex& */	public void setDeleteIndex(Set aaDeleteIndex)	{		caDeleteIndex = aaDeleteIndex;	}	/**	 * Set value of DeleteTransKeyList	 * 	 * @param avDeleteTransKeyList Vector	 *//* &SubcontractorRenewalCacheData.setDeleteTransKeyList& */	public void setDeleteTransKeyList(Vector avDeleteTransKeyList)	{		cvDeleteTransKeyList = avDeleteTransKeyList;	}	/**	 * Set value of DiskHeldPltList	 * 	 * @param ahtDiskHeldPltList Hashtable	 *//* &SubcontractorRenewalCacheData.setDiskHeldPltList& */	public void setDiskHeldPltList(Hashtable ahtDiskHeldPltList)	{		chtDiskHeldPltList = ahtDiskHeldPltList;	}	/**	 * Set value of DisplaySubconInfo	 * 	 * @param asDisplaySubconInfo String	 *//* &SubcontractorRenewalCacheData.setDisplaySubconInfo& */	public void setDisplaySubconInfo(String asDisplaySubconInfo)	{		csDisplaySubconInfo = asDisplaySubconInfo;	}	/**	 * Set value of ErrorIndices	 * 	 * @param aaErrorIndices Set	 *//* &SubcontractorRenewalCacheData.setErrorIndices& */	public void setErrorIndices(Set aaErrorIndices)	{		caErrorIndices = aaErrorIndices;	}	/**	 * Set value of Exception	 * 	 * @param aeException RTSException	 *//* &SubcontractorRenewalCacheData.setException& */	public void setException(RTSException aeException)	{		ceException = aeException;	}	/**	 * Set value of ExceptionField	 * 	 * @param aiExceptionField int	 *//* &SubcontractorRenewalCacheData.setExceptionField& */	public void setExceptionField(int aiExceptionField)	{		ciExceptionField = aiExceptionField;	}	/**	 * Set value of HeldInvPlt	 * 	 * @param aaHeldInvPlt ProcessInventoryData	 *//* &SubcontractorRenewalCacheData.setHeldInvPlt& */	public void setHeldInvPlt(ProcessInventoryData aaHeldInvPlt)	{		caHeldInvPlt = aaHeldInvPlt;	}	/**	 * Set value of INV003AllocatedName	 * 	 * @param asINV003AllocatedName String	 *//* &SubcontractorRenewalCacheData.setINV003AllocatedName& */	public void setINV003AllocatedName(String asINV003AllocatedName)	{		csINV003AllocatedName = asINV003AllocatedName;	}	/**	 * Set value of INV003ProcessInventoryData	 * 	 * @param aaINV003ProcessInventoryData ProcessInventoryData	 *//* &SubcontractorRenewalCacheData.setINV003ProcessInventoryData& */	public void setINV003ProcessInventoryData(ProcessInventoryData aaINV003ProcessInventoryData)	{		caINV003ProcessInventoryData = aaINV003ProcessInventoryData;	}	/**	 * Set value of INV003Voided	 * 	 * @param abINV003Voided boolean	 *//* &SubcontractorRenewalCacheData.setINV003Voided& */	public void setINV003Voided(boolean abINV003Voided)	{		cbINV003Voided = abINV003Voided;	}	/**	 * Set value of InvalidRecordsMsg	 * 	 * @param asInvalidRecordsMsg String	 *//* &SubcontractorRenewalCacheData.setInvalidRecordsMsg& */	public void setInvalidRecordsMsg(String asInvalidRecordsMsg)	{		csInvalidRecordsMsg = asInvalidRecordsMsg;	}	/**	 * Set value of InventoryCheckList	 * 	 * @param ahsInventoryCheckList HashSet	 *//* &SubcontractorRenewalCacheData.setInventoryCheckList& */	public void setInventoryCheckList(HashSet ahsInventoryCheckList)	{		chsInventoryCheckList = ahsInventoryCheckList;	}	/**	 * Set value of InvValIndex	 * 	 * @param ahsInvValIndex HashSet	 *//* &SubcontractorRenewalCacheData.setInvValIndex& */	public void setInvValIndex(HashSet ahsInvValIndex)	{		chsInvValIndex = ahsInvValIndex;	}	/**	 * Set value of IssuedInventories	 * 	 * @param ahtIssuedInventories HashSet	 *//* &SubcontractorRenewalCacheData.setIssuedInventories& */	public void setIssuedInventories(Hashtable ahtIssuedInventories)	{		chtIssuedInventories = ahtIssuedInventories;	}	/**	 * Set value of Modified	 * 	 * @param abModified boolean	 *//* &SubcontractorRenewalCacheData.setModified& */	public void setModified(boolean abModified)	{		cbModified = abModified;	}	/**	 * Set value of NextVC	 * 	 * @param aiNextVC int	 *//* &SubcontractorRenewalCacheData.setNextVC& */	public void setNextVC(int aiNextVC)	{		ciNextVC = aiNextVC;	}	/**	 * Set value of PrintedInventories	 *  	 * @param ahtPrintedInventories HashSet	 *//* &SubcontractorRenewalCacheData.setPrintedInventories& */	public void setPrintedInventories(Hashtable ahtPrintedInventories)	{		chtPrintedInventories = ahtPrintedInventories;	}	/**	 * Set value of PrintPrelimReport	 * 	 * @param abPrintPrelimReport boolean	 *//* &SubcontractorRenewalCacheData.setPrintPrelimReport& */	public void setPrintPrelimReport(boolean abPrintPrelimReport)	{		cbPrintPrelimReport = abPrintPrelimReport;	}	/**	 * Set value of RcptDir	 * 	 * @param asRcptDir String	 *//* &SubcontractorRenewalCacheData.setRcptDir& */	public void setRcptDir(String asRcptDir)	{		csRcptDir = asRcptDir;	}	/**	 * Set value of RecordModified	 * 	 * @param aaRecordModified SubcontractorRenewalData		 *//* &SubcontractorRenewalCacheData.setRecordModified& */	public void setRecordModified(SubcontractorRenewalData aaRecordModified)	{		caRecordModified = aaRecordModified;	}	/**	 * Set value of RecordModifyIndex	 * 	 * @param aaRecordModifyIndex Integer	 *//* &SubcontractorRenewalCacheData.setRecordModifyIndex& */	public void setRecordModifyIndex(Integer aaRecordModifyIndex)	{		caRecordModifyIndex = aaRecordModifyIndex;	}	/**	 * Set value of RecordTobeModified	 * 	 * @param aaRecordTobeModified SubcontractorRenewalData	 *//* &SubcontractorRenewalCacheData.setRecordTobeModified& */	public void setRecordTobeModified(SubcontractorRenewalData aaRecordTobeModified)	{		caRecordTobeModified = aaRecordTobeModified;	}	/**	 * Set value of ReleaseInventoryList	 *  	 * @param avReleaseInventoryList Vector	 *//* &SubcontractorRenewalCacheData.setReleaseInventoryList& */	public void setReleaseInventoryList(Vector avReleaseInventoryList)	{		cvReleaseInventoryList = avReleaseInventoryList;	}	/**	 * Set value of ReprintStickerReportDataList	 * 	 * @param ahtReprintStickerReportDataList Hashtable	 *//* &SubcontractorRenewalCacheData.setReprintStickerReportDataList& */	public void setReprintStickerReportDataList(Hashtable ahtReprintStickerReportDataList)	{		chtReprintStickerReportDataList =			ahtReprintStickerReportDataList;	}	/**	 * Set value of RunningTotal	 * 	 * @param aaRunningTotal Dollar	 *//* &SubcontractorRenewalCacheData.setRunningTotal& */	public void setRunningTotal(Dollar aaRunningTotal)	{		caRunningTotal = aaRunningTotal;	}	/**	 * Set value of SubconAllocatedInventory	 * 	 * @param avSubconAllocatedInventory Vector	 *//* &SubcontractorRenewalCacheData.setSubconAllocatedInventory& */	public void setSubconAllocatedInventory(Vector avSubconAllocatedInventory)	{		cvSubconAllocatedInventory = avSubconAllocatedInventory;	}	/**	 * Set value of SubconDiskData	 * 	 * @param avSubconDiskData Vector	 *//* &SubcontractorRenewalCacheData.setSubconDiskData& */	public void setSubconDiskData(Vector avSubconDiskData)	{		cvSubconDiskData = avSubconDiskData;	}	/**	 * Set value of SubconInfo	 * 	 * @param aaSubconInfo SubcontractorData	 *//* &SubcontractorRenewalCacheData.setSubconInfo& */	public void setSubconInfo(SubcontractorData aaSubconInfo)	{		caSubconInfo = aaSubconInfo;	}	/**	 * Set value of SubcontractorHdrData	 * 	 * @param aaSubcontractorHdrData SubcontractorHdrData	 *//* &SubcontractorRenewalCacheData.setSubcontractorHdrData& */	public void setSubcontractorHdrData(SubcontractorHdrData aaSubcontractorHdrData)	{		caSubcontractorHdrData = aaSubcontractorHdrData;	}	/**	 * Set value of SubconTransData	 * 	 * @param asmSubconTransData SortedMap	 *//* &SubcontractorRenewalCacheData.setSubconTransData& */	public void setSubconTransData(SortedMap asmSubconTransData)	{		csmSubconTransData = asmSubconTransData;	}	/**	 * Set value of TempRenewalBarCodeData	 * 	 * @param aaTempRenewalBarCodeData RenewalBarCodeData	 *//* &SubcontractorRenewalCacheData.setTempRenewalBarCodeData& */	public void setTempRenewalBarCodeData(RenewalBarCodeData aaTempRenewalBarCodeData)	{		caTempRenewalBarCodeData = aaTempRenewalBarCodeData;	}	/**	 * Set value of TempSubconRenewalData	 * 	 * @param aaTempSubconRenewalData SubcontractorRenewalData	 *//* &SubcontractorRenewalCacheData.setTempSubconRenewalData& */	public void setTempSubconRenewalData(SubcontractorRenewalData aaTempSubconRenewalData)	{		caTempSubconRenewalData = aaTempSubconRenewalData;	}	/**	 * Set value of TransactionHeaderData	 * 	 * @param aaTransactionHeaderData TransactionHeaderData	 *//* &SubcontractorRenewalCacheData.setTransactionHeaderData& */	public void setTransactionHeaderData(TransactionHeaderData aaTransactionHeaderData)	{		caTransactionHeaderData = aaTransactionHeaderData;	}	/**	 * Set value of TransAMDate	 * 	 * @param aiTransAMDate int	 *//* &SubcontractorRenewalCacheData.setTransAMDate& */	public void setTransAMDate(int aiTransAMDate)	{		ciTransAMDate = aiTransAMDate;	}	/**	 * Set value of TransCurrPltNo	 * 	 * @param ahtTransCurrPltNo HashSet	 *//* &SubcontractorRenewalCacheData.setTransCurrPltNo& */	public void setTransCurrPltNo(Hashtable ahtTransCurrPltNo)	{		chtTransCurrPltNo = ahtTransCurrPltNo;	}	/**	 * Set value of TransDocNo	 * 	 * @param ahtTransDocNo HashSet	 *//* &SubcontractorRenewalCacheData.setTransDocNo& */	public void setTransDocNo(Hashtable ahtTransDocNo)	{		chtTransDocNo = ahtTransDocNo;	}	/**	 * Set value of TransNewPltNo	 * 	 * @param ahtTransNewPltNo HashSet	 *//* &SubcontractorRenewalCacheData.setTransNewPltNo& */	public void setTransNewPltNo(Hashtable ahtTransNewPltNo)	{		chtTransNewPltNo = ahtTransNewPltNo;	}	/**	 * Set value of TransTime	 * 	 * @param aiTransTime int	 *//* &SubcontractorRenewalCacheData.setTransTime& */	public void setTransTime(int aiTransTime)	{		ciTransTime = aiTransTime;	}	/**	 * Set value of TransVIN	 * 	 * @param ahsTransVIN HashSet	 *//* &SubcontractorRenewalCacheData.setTransVIN& */	public void setTransVIN(Hashtable ahsTransVIN)	{		chtTransVIN = ahsTransVIN;	}	/**	 * Set value of UnProcsList	 * 	 * @param ahsUnProcsList HashSet	 *//* &SubcontractorRenewalCacheData.setUnProcsList& */	public void setUnProcsList(HashSet ahsUnProcsList)	{		chsUnProcsList = ahsUnProcsList;	}	/**	 * Set value of UseBarCode	 * 	 * @param abUseBarCode boolean	 *//* &SubcontractorRenewalCacheData.setUseBarCode& */	public void setUseBarCode(boolean abUseBarCode)	{		cbUseBarCode = abUseBarCode;	}}/* #SubcontractorRenewalCacheData# */