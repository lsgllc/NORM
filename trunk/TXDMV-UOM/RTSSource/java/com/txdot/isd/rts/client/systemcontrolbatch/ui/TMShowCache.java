package com.txdot.isd.rts.client.systemcontrolbatch.ui;import java.util.Vector;import javax.swing.table.AbstractTableModel;import com.txdot.isd.rts.services.data.TransactionCacheData;import com.txdot.isd.rts.services.util.RTSDate;import com.txdot.isd.rts.services.util.constants.CommonConstant;/* * * ShowCache.java * * (c) Texas Department of Transportation 2001 * --------------------------------------------------------------------- * Change History: * Name			Date		Description * ------------	-----------	-------------------------------------------- * Min Wang		11/11/2002	Fixed CQU100004746. Modified getValueAt()  * 							to add Void as a valid transaction type. * B Hargrove	04/29/2005	chg '/**' to '/*' to begin prolog. * 							defect 7897 Ver 5.2.3  * Jeff S.		07/08/2005	Code Cleanup for Java 1.4.2 upgrade * S Johnston				modify  *							defect 7897 ver 5.2.3 * Jeff S.		07/12/2005	Added String and Integer Constants. * 							defect 7897 ver 5.2.3 * K Harrell	06/18/2007	add UPDVITIME * 							modify getValueAt() * 							defect 9085 Ver Special Plates * K Harrell	11/01/2008	Modify to meet TM Standards	 * 							add RESETINPROCS, LOG_TIME, LOG_DATE, SQL,  * 							  AMDATE  * 							delete ZERO, ONE, TWO, THREE * 							add carrColumn_Name 					 * 							modify getColumnCount(), getColumnName(), * 							  getValueAt()  * 							defect 9831 Ver Defect_POS_B   *  -------------------------------------------------------------------- *//** * The table model for the Show Cache screen *  * @version	Defect_POS_B 	11/01/2008  * @author	Michael Abernethy * <br>Creation Date: 		09/20/2001 13:32:43 *//* &TMShowCache& */public class TMShowCache extends AbstractTableModel{/* &TMShowCache'cvVector& */	private Vector cvVector;		// defect 9831 /* &TMShowCache'carrColumn_Name& */	private final static String[] carrColumn_Name =			{				"Log Time",				"Log Date",				"SQL",				"AM Date"};/* &TMShowCache'LOG_TIME& */	private static final int LOG_TIME = 0;/* &TMShowCache'LOG_DATE& */	private static final int LOG_DATE = 1;/* &TMShowCache'SQL& */	private static final int SQL = 2;/* &TMShowCache'AMDATE& */	private static final int AMDATE = 3;/* &TMShowCache'RESETINPROCS& */	private static final String RESETINPROCS = " ResetInProcs ";	// end defect 9831 	/* &TMShowCache'EMPTY_STRING& */	private static final String EMPTY_STRING = "";/* &TMShowCache'PERIOD& */	private static final String PERIOD = ".";/* &TMShowCache'DELETE& */	private static final String DELETE = " Delete ";/* &TMShowCache'INSERT& */	private static final String INSERT = " Insert ";/* &TMShowCache'UPDATE& */	private static final String UPDATE = " Update ";/* &TMShowCache'VOID& */	private static final String VOID = " Void   ";/* &TMShowCache'UNKNOWN& */	private static final String UNKNOWN = " Unknown ";	// defect 9085 /* &TMShowCache'UPDVITIME& */	private static final String UPDVITIME = " UpdVITime ";	// end defect 9085 	/**	 * TMShowCache constructor.	 *//* &TMShowCache.TMShowCache& */	public TMShowCache()	{		super();		cvVector = new Vector();	}	/**	 * add	 * 	 * @param avV Vector	 *//* &TMShowCache.add& */	public void add(Vector avV)	{		cvVector = avV;		fireTableDataChanged();	}	/**	 * getColumnCount - returns the number of columns	 * 	 * @return int	 *//* &TMShowCache.getColumnCount& */	public int getColumnCount()	{		// defect 9831 		return carrColumn_Name.length;		// end defect 9831  	}	/**	 * Returns the column name.	 * 	 * @param  aiCol	int	 * @return String	 *//* &TMShowCache.getColumnName& */	public String getColumnName(int aiCol)	{		// defect 9831 		if (aiCol >= 0 && aiCol < carrColumn_Name.length)		{			return carrColumn_Name[aiCol];		}		else		{			return CommonConstant.STR_SPACE_EMPTY;		}		// end defect 9831 	}	/**	 * getRowCount - returns the number of rows	 * 	 * @return int	 *//* &TMShowCache.getRowCount& */	public int getRowCount()	{		return cvVector.size();	}	/**	 * getValueAt	 * 	 * @param aiRow int	 * @param aiCol int	 * @return Object	 *//* &TMShowCache.getValueAt& */	public Object getValueAt(int aiRow, int aiCol)	{		RTSDate laTime =			((TransactionCacheData) cvVector.get(aiRow)).getDateTime();		TransactionCacheData laCacheData =			(TransactionCacheData) cvVector.get(aiRow);		String lsName =			laCacheData.getObj().getClass().getName().substring(				laCacheData.getObj().getClass().getName().lastIndexOf(					PERIOD)					+ 1);							// defect 9831 		switch (aiCol)		{			case LOG_TIME :				{					return laTime.getClockTime();				}			case LOG_DATE :				{					return laTime.toString();				}			case SQL :				{					int liSQL = laCacheData.getProcName();					switch (liSQL)					{						case TransactionCacheData.DELETE :							{								return DELETE + lsName;							}						case TransactionCacheData.INSERT :							{								return INSERT + lsName;							}						case TransactionCacheData.UPDATE :							{								return UPDATE + lsName;							}							//defect 4746						case TransactionCacheData.VOID :							{								return VOID + lsName;							}							// end defect 4746							// defect 9085 						case TransactionCacheData.UPDVITRANSTIME :							{								return UPDVITIME + lsName;							}							// end defect 9085							// defect 9831 						case TransactionCacheData.RESETINPROCESS :							{								return RESETINPROCS + lsName;							}							// end defect 9831 						default :							{								return UNKNOWN + lsName;							}					}				}			case AMDATE :				{					return Integer.toString(laTime.getAMDate());				}			default :				{					return EMPTY_STRING;				}		}		// end defect 9831 	}}/* #TMShowCache# */