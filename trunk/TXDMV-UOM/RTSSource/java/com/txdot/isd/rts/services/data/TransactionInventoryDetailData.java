package com.txdot.isd.rts.services.data;import java.io.Serializable;import java.lang.reflect.Field;import java.util.HashMap;import java.util.Map;import com.txdot.isd.rts.services.util.Displayable;import com.txdot.isd.rts.services.util.UtilityMethods;import com.txdot.isd.rts.services.util.constants.CommonConstant;import com.txdot.isd.rts.services.util.constants.InventoryConstant;/* * * TransactionInventoryDetailData.java  * * (c) Texas Department of Transportation 2001 * * --------------------------------------------------------------------- * Change History: * Name			Date		Description * ------------	-----------	-------------------------------------------- * K Harrell   	11/11/2001  Added ItmCdDesc * C Walker		02/06/2002	Added SortingFlag * M Wang		06/29/2002	Updated TransactionInventoryDetailData *							CompareTo method. Added part of transId to  *							compare key	to improve sorting  *							(TransWsId, TransAmDate, TransTime). *							defect 4241 * K Harrell	03/20/2004	5.2.0 Merge.  See PCR 34 comments. * 							add ciReprntCount and associated get/set  * 							methods. * 							note: rename reprintCount to ciReprntCount  * 							to match standards * 							Ver 5.2.0 * K Harrell	10/17/2005	Java 1.4 Work *							defect 7899 Ver 5.2.3	 * K Harrell 	06/14/2010 	add csTransId, get/set methods * 							defect 10505 Ver 6.5.0  * --------------------------------------------------------------------- *//** * This Data class contains attributes and get set methods for  * TransactionInventoryDetailData *   * @version	6.5.0 			06/14/2010 * @author	Kathy Harrell * <br>Creation Date:		09/21/2001  *//* &TransactionInventoryDetailData& */public class TransactionInventoryDetailData	implements Serializable, Displayable, Comparable{	// int/* &TransactionInventoryDetailData'ciOfcIssuanceNo& */	protected int ciOfcIssuanceNo;/* &TransactionInventoryDetailData'ciSubstaId& */	protected int ciSubstaId;/* &TransactionInventoryDetailData'ciTransAMDate& */	protected int ciTransAMDate;/* &TransactionInventoryDetailData'ciTransWsId& */	protected int ciTransWsId;/* &TransactionInventoryDetailData'ciCustSeqNo& */	protected int ciCustSeqNo;/* &TransactionInventoryDetailData'ciTransTime& */	protected int ciTransTime;/* &TransactionInventoryDetailData'ciCacheTransAMDate& */	protected int ciCacheTransAMDate; // SendCache/* &TransactionInventoryDetailData'ciCacheTransTime& */	protected int ciCacheTransTime; // SendCache/* &TransactionInventoryDetailData'ciDelInvReasnCd& */	protected int ciDelInvReasnCd;/* &TransactionInventoryDetailData'ciDetailStatusCd& */	protected int ciDetailStatusCd;/* &TransactionInventoryDetailData'ciInvItmReorderLvl& */	protected int ciInvItmReorderLvl;/* &TransactionInventoryDetailData'ciInvItmTrckngOfc& */	protected int ciInvItmTrckngOfc;/* &TransactionInventoryDetailData'ciInvItmYr& */	protected int ciInvItmYr;/* &TransactionInventoryDetailData'ciInvQty& */	protected int ciInvQty;/* &TransactionInventoryDetailData'ciIssueMisMatchIndi& */	protected int ciIssueMisMatchIndi;/* &TransactionInventoryDetailData'ciOfcInvReorderQty& */	protected int ciOfcInvReorderQty;/* &TransactionInventoryDetailData'ciReprntCount& */	protected int ciReprntCount;	// String/* &TransactionInventoryDetailData'csDelInvReasnTxt& */	protected String csDelInvReasnTxt;/* &TransactionInventoryDetailData'csInvEndNo& */	protected String csInvEndNo;/* &TransactionInventoryDetailData'csInvId& */	protected String csInvId;/* &TransactionInventoryDetailData'csInvItmNo& */	protected String csInvItmNo;/* &TransactionInventoryDetailData'csInvLocIdCd& */	protected String csInvLocIdCd;/* &TransactionInventoryDetailData'csItmCd& */	protected String csItmCd;/* &TransactionInventoryDetailData'csItmCdDesc& */	protected String csItmCdDesc;	/**	 * This is used in the compareTo method to determine how to sort 	 * the data returned from the db for the Inquiry History Report.	 *//* &TransactionInventoryDetailData'csSortingFlag& */	protected String csSortingFlag;/* &TransactionInventoryDetailData'csTransCd& */	protected String csTransCd;	// defect 10505 /* &TransactionInventoryDetailData'csTransId& */	protected String csTransId;	// end defect 10505	// Constants /* &TransactionInventoryDetailData'LENGTH_INVID& */	private final static int LENGTH_INVID = 7;/* &TransactionInventoryDetailData'LENGTH_ITMCD& */	private final static int LENGTH_ITMCD = 8;/* &TransactionInventoryDetailData'LENGTH_INVITMYR& */	private final static int LENGTH_INVITMYR = 4;/* &TransactionInventoryDetailData'LENGTH_INVITMNO& */	private final static int LENGTH_INVITMNO = 10;/* &TransactionInventoryDetailData'LENGTH_TRANSWSID& */	private final static int LENGTH_TRANSWSID = 3;/* &TransactionInventoryDetailData'LENGTH_TRANSAMDATE& */	private final static int LENGTH_TRANSAMDATE = 5;/* &TransactionInventoryDetailData'LENGTH_TRANSTIME& */	private final static int LENGTH_TRANSTIME = 6;/* &TransactionInventoryDetailData'LENGTH_TRANSCD& */	private final static int LENGTH_TRANSCD = 6;/* &TransactionInventoryDetailData'serialVersionUID& */	private final static long serialVersionUID = 5256165480355437832L;	/**	 * Compares this object with the specified object for order.  Returns a	 * negative integer, zero, or a positive integer as this object is less	 * than, equal to, or greater than the specified object.<p>	 *	 * The implementor must ensure <tt>sgn(x.compareTo(y)) ==	 * -sgn(y.compareTo(x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This	 * implies that <tt>x.compareTo(y)</tt> must throw an exception iff	 * <tt>y.compareTo(x)</tt> throws an exception.)<p>	 *	 * The implementor must also ensure that the relation is transitive:	 * <tt>(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)</tt> implies	 * <tt>x.compareTo(z)&gt;0</tt>.<p>	 *	 * Finally, the implementer must ensure that <tt>x.compareTo(y)==0</tt>	 * implies that <tt>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</tt>, for	 * all <tt>z</tt>.<p>	 *	 * It is strongly recommended, but <i>not</i> strictly required that	 * <tt>(x.compareTo(y)==0) == (x.equals(y))</tt>.  Generally speaking, any	 * class that implements the <tt>Comparable</tt> interface and violates	 * this condition should clearly indicate this fact.  The recommended	 * language is "Note: this class has a natural ordering that is	 * inconsistent with equals."	 * 	 * @param   aaObject Object to be compared.	 * @return  a negative integer, zero, or a positive integer as this object	 *		is less than, equal to, or greater than the specified object.	 * 	 * @throws ClassCastException if the specified object's type prevents it	 *         from being compared to this Object.	 *//* &TransactionInventoryDetailData.compareTo& */	public int compareTo(Object aaObject)	{		// set up the keys for the object that is passed in		TransactionInventoryDetailData laInvInqReportData =			(TransactionInventoryDetailData) aaObject;		String lsInvInqReportDataKey1 = laInvInqReportData.getInvId();		String lsInvInqReportDataKey2 = laInvInqReportData.getItmCd();		String lsInvInqReportDataKey3 =			String.valueOf(laInvInqReportData.getInvItmYr());		String lsInvInqReportDataKey4 =			String.valueOf(laInvInqReportData.getInvItmNo());		String lsInvInqReportDataKey5 =			String.valueOf(laInvInqReportData.getTransWsId());		String lsInvInqReportDataKey6 =			String.valueOf(laInvInqReportData.getTransAMDate());		String lsInvInqReportDataKey7 =			String.valueOf(laInvInqReportData.getTransTime());		String lsInvInqReportDataKey8 = laInvInqReportData.getTransCd();		String lsKey1 = getInvId();		String lsKey2 = getItmCd();		String lsKey3 = String.valueOf(getInvItmYr());		String lsKey4 = getInvItmNo();		String lsKey5 = String.valueOf(getTransWsId());		String lsKey6 = String.valueOf(getTransAMDate());		String lsKey7 = String.valueOf(getTransTime());		String lsKey8 = getTransCd();		// Pad the itmcodes & transcds with zeros to the right of the item code.  Need to do this b/c		// if pad to the left (like constructPrimaryKey) they are not in alphabetical order		lsInvInqReportDataKey2 =			UtilityMethods.addPaddingRight(				lsInvInqReportDataKey2,				LENGTH_ITMCD,				CommonConstant.STR_ZERO);		lsInvInqReportDataKey5 =			UtilityMethods.addPaddingRight(				lsInvInqReportDataKey5,				LENGTH_TRANSWSID,				CommonConstant.STR_ZERO);		lsKey2 =			UtilityMethods.addPaddingRight(				lsKey2,				LENGTH_ITMCD,				CommonConstant.STR_ZERO);		lsKey5 =			UtilityMethods.addPaddingRight(				lsKey5,				LENGTH_TRANSWSID,				CommonConstant.STR_ZERO);		// set up the keys for this current object, so we can do a comparison.  Note this is not the object that was passed in.		// it is the current object that is containing the results of the sort		try		{			if (laInvInqReportData				.getSortingFlag()				.equals(InventoryConstant.EMP)				|| laInvInqReportData.getSortingFlag().equals(					InventoryConstant.WS)				|| laInvInqReportData.getSortingFlag().equals(					InventoryConstant.DLR)				|| laInvInqReportData.getSortingFlag().equals(					InventoryConstant.SUBCON))			{				String lsPrimaryKey =					UtilityMethods.constructPrimaryKey(						new String[] {							lsInvInqReportDataKey1,							lsInvInqReportDataKey2,							lsInvInqReportDataKey3,							lsInvInqReportDataKey4,							lsInvInqReportDataKey5,							lsInvInqReportDataKey6,							lsInvInqReportDataKey7,							lsInvInqReportDataKey8,							},						new int[] {							LENGTH_INVID,							LENGTH_ITMCD,							LENGTH_INVITMYR,							LENGTH_INVITMNO,							LENGTH_TRANSWSID,							LENGTH_TRANSAMDATE,							LENGTH_TRANSTIME,							LENGTH_TRANSCD });				String lsThisPrimaryKey =					UtilityMethods.constructPrimaryKey(						new String[] {							lsKey1,							lsKey2,							lsKey3,							lsKey4,							lsKey5,							lsKey6,							lsKey7,							lsKey8 },						new int[] {							LENGTH_INVID,							LENGTH_ITMCD,							LENGTH_INVITMYR,							LENGTH_INVITMNO,							LENGTH_TRANSWSID,							LENGTH_TRANSAMDATE,							LENGTH_TRANSTIME,							LENGTH_TRANSCD });				return lsThisPrimaryKey.compareTo(lsPrimaryKey);			}			String lsPrimaryKey =				UtilityMethods.constructPrimaryKey(					new String[] {						lsInvInqReportDataKey2,						lsInvInqReportDataKey3,						lsInvInqReportDataKey4,						lsInvInqReportDataKey5,						lsInvInqReportDataKey6,						lsInvInqReportDataKey7,						lsInvInqReportDataKey8,						},					new int[] {						LENGTH_ITMCD,						LENGTH_INVITMYR,						LENGTH_INVITMNO,						LENGTH_TRANSWSID,						LENGTH_TRANSAMDATE,						LENGTH_TRANSTIME,						LENGTH_TRANSCD });			String lsThisPrimaryKey =				UtilityMethods.constructPrimaryKey(					new String[] {						lsKey2,						lsKey3,						lsKey4,						lsKey5,						lsKey6,						lsKey7,						lsKey8 },					new int[] {						LENGTH_ITMCD,						LENGTH_INVITMYR,						LENGTH_INVITMNO,						LENGTH_TRANSWSID,						LENGTH_TRANSAMDATE,						LENGTH_TRANSTIME,						LENGTH_TRANSCD });			// set up the keys for this current object, so we can do a 			// comparison.  Note this is not the object that was passed 			// in.  It is the current object that is containing the 			// results of the sort			return lsThisPrimaryKey.compareTo(lsPrimaryKey);		}		catch (Exception aeEx)		{		}		return 0;	}	/**	 * Method used to return field attributes	 * 	 * @return Map	 *//* &TransactionInventoryDetailData.getAttributes& */	public Map getAttributes()	{		HashMap lhmHash = new HashMap();		Field[] larrFields = this.getClass().getDeclaredFields();		for (int i = 0; i < larrFields.length; i++)		{			try			{				lhmHash.put(					larrFields[i].getName(),					larrFields[i].get(this));			}			catch (IllegalAccessException aeIllAccEx)			{				continue;			}		}		return lhmHash;	}	/**	 * Return the value of CacheTransAMDate 	 * 	 * @return int	 *//* &TransactionInventoryDetailData.getCacheTransAMDate& */	public int getCacheTransAMDate()	{		return ciCacheTransAMDate;	}	/**	 * Return the value of CacheTransTime	 * 	 * @return int	 *//* &TransactionInventoryDetailData.getCacheTransTime& */	public int getCacheTransTime()	{		return ciCacheTransTime;	}	/**	 * Returns the value of CustSeqNo	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getCustSeqNo& */	public final int getCustSeqNo()	{		return ciCustSeqNo;	}	/**	 * Returns the value of DelInvReasnCd	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getDelInvReasnCd& */	public final int getDelInvReasnCd()	{		return ciDelInvReasnCd;	}	/**	 * Returns the value of DelInvReasnTxt	 * 	 * @return  String 	 *//* &TransactionInventoryDetailData.getDelInvReasnTxt& */	public final String getDelInvReasnTxt()	{		return csDelInvReasnTxt;	}	/**	 * Returns the value of DetailStatusCd	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getDetailStatusCd& */	public final int getDetailStatusCd()	{		return ciDetailStatusCd;	}	/**	 * Returns the value of InvEndNo	 * 	 * @return  String 	 *//* &TransactionInventoryDetailData.getInvEndNo& */	public final String getInvEndNo()	{		return csInvEndNo;	}	/**	 * Returns the value of InvId	 * 	 * @return  String 	 *//* &TransactionInventoryDetailData.getInvId& */	public final String getInvId()	{		return csInvId;	}	/**	 * Returns the value of InvItmNo	 * 	 * @return  String 	 *//* &TransactionInventoryDetailData.getInvItmNo& */	public final String getInvItmNo()	{		return csInvItmNo;	}	/**	 * Returns the value of InvItmReorderLvl	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getInvItmReorderLvl& */	public final int getInvItmReorderLvl()	{		return ciInvItmReorderLvl;	}	/**	 * Returns the value of InvItmTrckngOfc	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getInvItmTrckngOfc& */	public final int getInvItmTrckngOfc()	{		return ciInvItmTrckngOfc;	}	/**	 * Returns the value of InvItmYr	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getInvItmYr& */	public final int getInvItmYr()	{		return ciInvItmYr;	}	/**	 * Returns the value of InvLocIdCd	 * 	 * @return  String 	 *//* &TransactionInventoryDetailData.getInvLocIdCd& */	public final String getInvLocIdCd()	{		return csInvLocIdCd;	}	/**	 * Returns the value of InvQty	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getInvQty& */	public final int getInvQty()	{		return ciInvQty;	}	/**	 * Returns the value of IssueMisMatchIndi	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getIssueMisMatchIndi& */	public final int getIssueMisMatchIndi()	{		return ciIssueMisMatchIndi;	}	/**	 * Returns the value of ItmCd	 * 	 * @return  String 	 *//* &TransactionInventoryDetailData.getItmCd& */	public final String getItmCd()	{		return csItmCd;	}	/**	* Returns the value of ItmCdDesc	* 	* @return  String 	*//* &TransactionInventoryDetailData.getItmCdDesc& */	public final String getItmCdDesc()	{		return csItmCdDesc;	}	/**	 * Returns the value of OfcInvReorderQty	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getOfcInvReorderQty& */	public final int getOfcInvReorderQty()	{		return ciOfcInvReorderQty;	}	/**	 * Returns the value of OfcIssuanceNo	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getOfcIssuanceNo& */	public final int getOfcIssuanceNo()	{		return ciOfcIssuanceNo;	}	/**	 * Return the value of SortingFlag	 * @return String	 *//* &TransactionInventoryDetailData.getSortingFlag& */	public String getSortingFlag()	{		return csSortingFlag;	}	/**	 * Returns the value of SubstaId	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getSubstaId& */	public final int getSubstaId()	{		return ciSubstaId;	}	/**	 * Returns the value of TransAMDate	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getTransAMDate& */	public final int getTransAMDate()	{		return ciTransAMDate;	}	/**	 * Returns the value of TransCd	 * 	 * @return  String 	 *//* &TransactionInventoryDetailData.getTransCd& */	public final String getTransCd()	{		return csTransCd;	}	/**	* Returns the value of TransId	* 	* @return String 	*//* &TransactionInventoryDetailData.getTransId& */	public String getTransId()	{		if (csTransId == null || csTransId.trim().length() == 0)		{			csTransId =				UtilityMethods.getTransId(					ciOfcIssuanceNo,					ciTransWsId,					ciTransAMDate,					ciTransTime);		}		return csTransId;	}	/**	 * Returns the value of TransTime	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getTransTime& */	public final int getTransTime()	{		return ciTransTime;	}	/**	 * Returns the value of TransWsId	 * 	 * @return  int 	 *//* &TransactionInventoryDetailData.getTransWsId& */	public final int getTransWsId()	{		return ciTransWsId;	}	/**	 * Return the value of CacheTransAMDate	 * 	 * @param aiCacheTransAMDate int	 *//* &TransactionInventoryDetailData.setCacheTransAMDate& */	public void setCacheTransAMDate(int aiCacheTransAMDate)	{		ciCacheTransAMDate = aiCacheTransAMDate;	}	/**	 * Return the value of CacheTransTime	 * 	 * @param aiCacheTransTime int	 *//* &TransactionInventoryDetailData.setCacheTransTime& */	public void setCacheTransTime(int aiCacheTransTime)	{		ciCacheTransTime = aiCacheTransTime;	}	/**	 * This method sets the value of CustSeqNo.	 * 	 * @param aiCustSeqNo   int 	 *//* &TransactionInventoryDetailData.setCustSeqNo& */	public final void setCustSeqNo(int aiCustSeqNo)	{		ciCustSeqNo = aiCustSeqNo;	}	/**	 * This method sets the value of DelInvReasnCd.	 * 	 * @param aiDelInvReasnCd   int 	 *//* &TransactionInventoryDetailData.setDelInvReasnCd& */	public final void setDelInvReasnCd(int aiDelInvReasnCd)	{		ciDelInvReasnCd = aiDelInvReasnCd;	}	/**	 * This method sets the value of DelInvReasnTxt.	 * 	 * @param asDelInvReasnTxt   String 	 *//* &TransactionInventoryDetailData.setDelInvReasnTxt& */	public final void setDelInvReasnTxt(String asDelInvReasnTxt)	{		csDelInvReasnTxt = asDelInvReasnTxt;	}	/**	 * This method sets the value of DetailStatusCd.	 * 	 * @param aiDetailStatusCd   int 	 *//* &TransactionInventoryDetailData.setDetailStatusCd& */	public final void setDetailStatusCd(int aiDetailStatusCd)	{		ciDetailStatusCd = aiDetailStatusCd;	}	/**	 * This method sets the value of InvEndNo.	 * 	 * @param asInvEndNo   String 	 *//* &TransactionInventoryDetailData.setInvEndNo& */	public final void setInvEndNo(String asInvEndNo)	{		csInvEndNo = asInvEndNo;	}	/**	 * This method sets the value of InvId.	 * 	 * @param asInvId   String 	 *//* &TransactionInventoryDetailData.setInvId& */	public final void setInvId(String asInvId)	{		csInvId = asInvId;	}	/**	 * This method sets the value of InvItmNo.	 * 	 * @param asInvItmNo   String 	 *//* &TransactionInventoryDetailData.setInvItmNo& */	public final void setInvItmNo(String asInvItmNo)	{		csInvItmNo = asInvItmNo;	}	/**	 * This method sets the value of InvItmReorderLvl.	 * 	 * @param aiInvItmReorderLvl   int 	 *//* &TransactionInventoryDetailData.setInvItmReorderLvl& */	public final void setInvItmReorderLvl(int aiInvItmReorderLvl)	{		ciInvItmReorderLvl = aiInvItmReorderLvl;	}	/**	 * This method sets the value of InvItmTrckngOfc.	 * 	 * @param aiInvItmTrckngOfc   int 	 *//* &TransactionInventoryDetailData.setInvItmTrckngOfc& */	public final void setInvItmTrckngOfc(int aiInvItmTrckngOfc)	{		ciInvItmTrckngOfc = aiInvItmTrckngOfc;	}	/**	 * This method sets the value of InvItmYr.	 * 	 * @param aiInvItmYr   int 	 *//* &TransactionInventoryDetailData.setInvItmYr& */	public final void setInvItmYr(int aiInvItmYr)	{		ciInvItmYr = aiInvItmYr;	}	/**	 * This method sets the value of InvLocIdCd.	 * 	 * @param aiInvLocIdCd   String 	 *//* &TransactionInventoryDetailData.setInvLocIdCd& */	public final void setInvLocIdCd(String aiInvLocIdCd)	{		csInvLocIdCd = aiInvLocIdCd;	}	/**	 * This method sets the value of InvQty.	 * 	 * @param aiInvQty   int 	 *//* &TransactionInventoryDetailData.setInvQty& */	public final void setInvQty(int aiInvQty)	{		ciInvQty = aiInvQty;	}	/**	 * This method sets the value of IssueMisMatchIndi.	 * 	 * @param asIssueMisMatchIndi   int 	 *//* &TransactionInventoryDetailData.setIssueMisMatchIndi& */	public final void setIssueMisMatchIndi(int asIssueMisMatchIndi)	{		ciIssueMisMatchIndi = asIssueMisMatchIndi;	}	/**	* This method sets the value of ItmCd.	* @param asItmCd   String 	*//* &TransactionInventoryDetailData.setItmCd& */	public final void setItmCd(String asItmCd)	{		csItmCd = asItmCd;	}	/**	 * This method sets the value of ItmCdDesc.	 * 	 * @param asItmCdDesc   String 	 *//* &TransactionInventoryDetailData.setItmCdDesc& */	public final void setItmCdDesc(String asItmCdDesc)	{		csItmCdDesc = asItmCdDesc;	}	/**	 * This method sets the value of OfcInvReorderQty.	 * 	 * @param aiOfcInvReorderQty   int 	 *//* &TransactionInventoryDetailData.setOfcInvReorderQty& */	public final void setOfcInvReorderQty(int aiOfcInvReorderQty)	{		ciOfcInvReorderQty = aiOfcInvReorderQty;	}	/**	 * This method sets the value of OfcIssuanceNo.	 * 	 * @param aiOfcIssuanceNo   int 	 *//* &TransactionInventoryDetailData.setOfcIssuanceNo& */	public final void setOfcIssuanceNo(int aiOfcIssuanceNo)	{		ciOfcIssuanceNo = aiOfcIssuanceNo;	}	/**	 * Return the value of 	 * 	 * @param aSortingFlag String	 *//* &TransactionInventoryDetailData.setSortingFlag& */	public void setSortingFlag(String asSortingFlag)	{		csSortingFlag = asSortingFlag;	}	/**	 * This method sets the value of SubstaId.	 * 	 * @param aiSubstaId   int 	 *//* &TransactionInventoryDetailData.setSubstaId& */	public final void setSubstaId(int aiSubstaId)	{		ciSubstaId = aiSubstaId;	}	/**	 * This method sets the value of TransAMDate.	 * 	 * @param aiTransAMDate   int 	 *//* &TransactionInventoryDetailData.setTransAMDate& */	public final void setTransAMDate(int aiTransAMDate)	{		ciTransAMDate = aiTransAMDate;	}	/**	 * This method sets the value of TransCd.	 * 	 * @param asTransCd   String 	 *//* &TransactionInventoryDetailData.setTransCd& */	public final void setTransCd(String asTransCd)	{		csTransCd = asTransCd;	}	/**	 * Sets the value of TransId	 * 	 * @param asTransid  	 *//* &TransactionInventoryDetailData.setTransId& */	public void setTransId(String asTransId)	{		csTransId = asTransId;	}	/**	 * This method sets the value of TransTime.	 * 	 * @param aiTransTime   int 	 *//* &TransactionInventoryDetailData.setTransTime& */	public final void setTransTime(int aiTransTime)	{		ciTransTime = aiTransTime;	}	/**	 * This method sets the value of TransWsId.	 * 	 * @param aiTransWsId   int 	 *//* &TransactionInventoryDetailData.setTransWsId& */	public final void setTransWsId(int aiTransWsId)	{		ciTransWsId = aiTransWsId;	}	/**	 * Returns the value of ReprntCount	 * 	 * @return int	 *//* &TransactionInventoryDetailData.getReprntCount& */	public int getReprntCount()	{		return ciReprntCount;	}	/**	 * Sets the value of ReprntCount	 * 	 * @param aiReprntCount	 *//* &TransactionInventoryDetailData.setReprntCount& */	public void setReprntCount(int aiReprntCount)	{		ciReprntCount = aiReprntCount;	}}/* #TransactionInventoryDetailData# */